
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOL CHAR ELSE EQ FLOAT FOR GTE ID IF INT INTLIT LTE NEQ OR RETURN VOID WHILE\n    Program : Function Program\n            | empty\n    \n    Function : FunctionReturnType ID '(' ')' '{' Declarations Statements ReturnStatement '}'\n             | FunctionReturnType ID '(' Params ')' '{' Declarations Statements ReturnStatement '}'\n    \n    Params : Param Params\n           | empty\n    \n    Param : Type ID\n    \n    ReturnStatement : RETURN Expression ';'\n                    | RETURN ';'\n    \n    empty :\n    \n    Declarations : Declaration Declarations\n                 | empty\n    \n    Declaration : Type ID ';'\n    \n    Type : INT\n         | BOOL\n         | FLOAT\n         | CHAR\n    \n    FunctionReturnType : Type\n                       | VOID\n    \n    Statements : Statement Statements\n               | empty\n    \n    Statement : Assignment\n              | IfStatement\n              | WhileStatement\n              | ForStatement\n              | ';'\n              | Block\n    \n    Block : '{' Statements '}'\n    \n    IfStatement : IF '(' Expression ')' Statement ELSE Statement\n    \n    WhileStatement : WHILE '(' Expression ')' Statement\n    \n    ForStatement : FOR '(' Assignment Expression ';' Assignment ')' Statement\n    \n    Assignment : ID '=' Expression ';'\n    \n    Expression : Conjunction\n               | Expression OR Conjunction\n    \n    Conjunction : Equality\n                | Conjunction AND Equality\n    \n    Equality : Relation\n             | Relation EquOp Relation\n    \n    EquOp : EQ\n          | NEQ\n    \n    Relation : Addition\n             | Addition RelOp Addition \n    \n    RelOp : '<'\n          | LTE\n          | '>'\n          | GTE\n    \n    Addition : Term\n             | Addition AddOp Term\n    \n    AddOp : '+'\n          | '-'\n    \n    Term : Factor\n         | Term MulOp Primary\n    \n    MulOp : '*'\n          | '/'\n          | '%'\n    \n    Factor : Primary\n           | UnaryOp Primary\n    \n    UnaryOp : '-'\n            | '!'\n    Primary : INTLITPrimary : ID\n    Primary : ID '(' ')'\n            | ID '(' Primary ')'\n    "
    
_lr_action_items = {'$end':([0,1,2,3,11,69,100,],[-10,0,-10,-2,-1,-3,-4,]),'VOID':([0,2,69,100,],[6,6,-3,-4,]),'INT':([0,2,13,16,19,22,24,27,53,69,100,],[7,7,7,7,7,-7,7,7,-13,-3,-4,]),'BOOL':([0,2,13,16,19,22,24,27,53,69,100,],[8,8,8,8,8,-7,8,8,-13,-3,-4,]),'FLOAT':([0,2,13,16,19,22,24,27,53,69,100,],[9,9,9,9,9,-7,9,9,-13,-3,-4,]),'CHAR':([0,2,13,16,19,22,24,27,53,69,100,],[10,10,10,10,10,-7,10,10,-13,-3,-4,]),'ID':([4,5,6,7,8,9,10,18,19,23,24,25,26,27,29,31,33,34,35,36,37,38,42,44,45,48,50,51,52,53,64,66,67,68,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,97,98,110,111,113,115,116,117,],[12,-18,-19,-14,-15,-16,-17,22,-10,28,-10,-12,43,-10,28,28,-22,-23,-24,-25,-26,-27,-11,28,55,55,55,55,28,-13,55,-58,-59,-28,55,55,-32,55,55,55,-39,-40,55,55,-43,-44,-45,-46,-49,-50,55,-53,-54,-55,28,28,-30,28,28,-29,28,-31,]),'(':([12,39,40,41,55,],[13,50,51,52,76,]),')':([13,15,16,17,21,22,55,57,58,59,60,61,62,63,65,72,73,76,77,95,101,102,103,104,105,106,107,108,112,114,],[14,20,-10,-6,-5,-7,-61,-33,-35,-37,-41,-47,-51,-56,-60,97,98,101,-32,-57,-62,112,-34,-36,-38,-42,-48,-52,-63,116,]),'{':([14,19,20,23,24,25,27,29,31,33,34,35,36,37,38,42,44,53,68,77,97,98,110,113,115,116,117,],[19,-10,27,29,-10,-12,-10,29,29,-22,-23,-24,-25,-26,-27,-11,29,-13,-28,-32,29,29,-30,29,-29,29,-31,]),';':([19,23,24,25,27,29,31,33,34,35,36,37,38,42,43,44,48,53,55,56,57,58,59,60,61,62,63,65,68,70,77,95,97,98,99,101,103,104,105,106,107,108,110,112,113,115,116,117,],[-10,37,-10,-12,-10,37,37,-22,-23,-24,-25,-26,-27,-11,53,37,71,-13,-61,77,-33,-35,-37,-41,-47,-51,-56,-60,-28,96,-32,-57,37,37,111,-62,-34,-36,-38,-42,-48,-52,-30,-63,37,-29,37,-31,]),'IF':([19,23,24,25,27,29,31,33,34,35,36,37,38,42,44,53,68,77,97,98,110,113,115,116,117,],[-10,39,-10,-12,-10,39,39,-22,-23,-24,-25,-26,-27,-11,39,-13,-28,-32,39,39,-30,39,-29,39,-31,]),'WHILE':([19,23,24,25,27,29,31,33,34,35,36,37,38,42,44,53,68,77,97,98,110,113,115,116,117,],[-10,40,-10,-12,-10,40,40,-22,-23,-24,-25,-26,-27,-11,40,-13,-28,-32,40,40,-30,40,-29,40,-31,]),'FOR':([19,23,24,25,27,29,31,33,34,35,36,37,38,42,44,53,68,77,97,98,110,113,115,116,117,],[-10,41,-10,-12,-10,41,41,-22,-23,-24,-25,-26,-27,-11,41,-13,-28,-32,41,41,-30,41,-29,41,-31,]),'RETURN':([19,23,24,25,27,30,31,32,33,34,35,36,37,38,42,44,49,53,54,68,77,110,115,117,],[-10,-10,-10,-12,-10,48,-10,-21,-22,-23,-24,-25,-26,-27,-11,-10,-20,-13,48,-28,-32,-30,-29,-31,]),'=':([28,],[45,]),'}':([29,31,32,33,34,35,36,37,38,46,47,49,68,71,75,77,96,110,115,117,],[-10,-10,-21,-22,-23,-24,-25,-26,-27,68,69,-20,-28,-9,100,-32,-8,-30,-29,-31,]),'ELSE':([33,34,35,36,37,38,68,77,109,110,115,117,],[-22,-23,-24,-25,-26,-27,-28,-32,113,-30,-29,-31,]),'INTLIT':([45,48,50,51,64,66,67,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,],[65,65,65,65,65,-58,-59,65,65,-32,65,65,65,-39,-40,65,65,-43,-44,-45,-46,-49,-50,65,-53,-54,-55,]),'-':([45,48,50,51,55,60,61,62,63,65,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,95,101,106,107,108,112,],[66,66,66,66,-61,90,-47,-51,-56,-60,66,-32,66,66,66,-39,-40,66,66,-43,-44,-45,-46,-49,-50,-57,-62,90,-48,-52,-63,]),'!':([45,48,50,51,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,],[67,67,67,67,67,-32,67,67,67,-39,-40,67,67,-43,-44,-45,-46,-49,-50,]),'*':([55,61,62,63,65,95,101,107,108,112,],[-61,92,-51,-56,-60,-57,-62,92,-52,-63,]),'/':([55,61,62,63,65,95,101,107,108,112,],[-61,93,-51,-56,-60,-57,-62,93,-52,-63,]),'%':([55,61,62,63,65,95,101,107,108,112,],[-61,94,-51,-56,-60,-57,-62,94,-52,-63,]),'<':([55,60,61,62,63,65,95,101,107,108,112,],[-61,85,-47,-51,-56,-60,-57,-62,-48,-52,-63,]),'LTE':([55,60,61,62,63,65,95,101,107,108,112,],[-61,86,-47,-51,-56,-60,-57,-62,-48,-52,-63,]),'>':([55,60,61,62,63,65,95,101,107,108,112,],[-61,87,-47,-51,-56,-60,-57,-62,-48,-52,-63,]),'GTE':([55,60,61,62,63,65,95,101,107,108,112,],[-61,88,-47,-51,-56,-60,-57,-62,-48,-52,-63,]),'+':([55,60,61,62,63,65,95,101,106,107,108,112,],[-61,89,-47,-51,-56,-60,-57,-62,89,-48,-52,-63,]),'EQ':([55,59,60,61,62,63,65,95,101,106,107,108,112,],[-61,81,-41,-47,-51,-56,-60,-57,-62,-42,-48,-52,-63,]),'NEQ':([55,59,60,61,62,63,65,95,101,106,107,108,112,],[-61,82,-41,-47,-51,-56,-60,-57,-62,-42,-48,-52,-63,]),'AND':([55,57,58,59,60,61,62,63,65,95,101,103,104,105,106,107,108,112,],[-61,79,-35,-37,-41,-47,-51,-56,-60,-57,-62,79,-36,-38,-42,-48,-52,-63,]),'OR':([55,56,57,58,59,60,61,62,63,65,70,72,73,95,99,101,103,104,105,106,107,108,112,],[-61,78,-33,-35,-37,-41,-47,-51,-56,-60,78,78,78,-57,78,-62,-34,-36,-38,-42,-48,-52,-63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,2,],[1,11,]),'Function':([0,2,],[2,2,]),'empty':([0,2,13,16,19,23,24,27,29,31,44,],[3,3,17,17,25,32,25,25,32,32,32,]),'FunctionReturnType':([0,2,],[4,4,]),'Type':([0,2,13,16,19,24,27,],[5,5,18,18,26,26,26,]),'Params':([13,16,],[15,21,]),'Param':([13,16,],[16,16,]),'Declarations':([19,24,27,],[23,42,44,]),'Declaration':([19,24,27,],[24,24,24,]),'Statements':([23,29,31,44,],[30,46,49,54,]),'Statement':([23,29,31,44,97,98,113,116,],[31,31,31,31,109,110,115,117,]),'Assignment':([23,29,31,44,52,97,98,111,113,116,],[33,33,33,33,74,33,33,114,33,33,]),'IfStatement':([23,29,31,44,97,98,113,116,],[34,34,34,34,34,34,34,34,]),'WhileStatement':([23,29,31,44,97,98,113,116,],[35,35,35,35,35,35,35,35,]),'ForStatement':([23,29,31,44,97,98,113,116,],[36,36,36,36,36,36,36,36,]),'Block':([23,29,31,44,97,98,113,116,],[38,38,38,38,38,38,38,38,]),'ReturnStatement':([30,54,],[47,75,]),'Expression':([45,48,50,51,74,],[56,70,72,73,99,]),'Conjunction':([45,48,50,51,74,78,],[57,57,57,57,57,103,]),'Equality':([45,48,50,51,74,78,79,],[58,58,58,58,58,58,104,]),'Relation':([45,48,50,51,74,78,79,80,],[59,59,59,59,59,59,59,105,]),'Addition':([45,48,50,51,74,78,79,80,83,],[60,60,60,60,60,60,60,60,106,]),'Term':([45,48,50,51,74,78,79,80,83,84,],[61,61,61,61,61,61,61,61,61,107,]),'Factor':([45,48,50,51,74,78,79,80,83,84,],[62,62,62,62,62,62,62,62,62,62,]),'Primary':([45,48,50,51,64,74,76,78,79,80,83,84,91,],[63,63,63,63,95,63,102,63,63,63,63,63,108,]),'UnaryOp':([45,48,50,51,74,78,79,80,83,84,],[64,64,64,64,64,64,64,64,64,64,]),'EquOp':([59,],[80,]),'RelOp':([60,],[83,]),'AddOp':([60,106,],[84,84,]),'MulOp':([61,107,],[91,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Function Program','Program',2,'p_Program','clase0206.py',56),
  ('Program -> empty','Program',1,'p_Program','clase0206.py',57),
  ('Function -> FunctionReturnType ID ( ) { Declarations Statements ReturnStatement }','Function',9,'p_Function','clase0206.py',64),
  ('Function -> FunctionReturnType ID ( Params ) { Declarations Statements ReturnStatement }','Function',10,'p_Function','clase0206.py',65),
  ('Params -> Param Params','Params',2,'p_Params','clase0206.py',75),
  ('Params -> empty','Params',1,'p_Params','clase0206.py',76),
  ('Param -> Type ID','Param',2,'p_Param','clase0206.py',84),
  ('ReturnStatement -> RETURN Expression ;','ReturnStatement',3,'p_ReturnStatement','clase0206.py',91),
  ('ReturnStatement -> RETURN ;','ReturnStatement',2,'p_ReturnStatement','clase0206.py',92),
  ('empty -> <empty>','empty',0,'p_empty','clase0206.py',101),
  ('Declarations -> Declaration Declarations','Declarations',2,'p_Declarations','clase0206.py',107),
  ('Declarations -> empty','Declarations',1,'p_Declarations','clase0206.py',108),
  ('Declaration -> Type ID ;','Declaration',3,'p_Declaration','clase0206.py',115),
  ('Type -> INT','Type',1,'p_Type','clase0206.py',121),
  ('Type -> BOOL','Type',1,'p_Type','clase0206.py',122),
  ('Type -> FLOAT','Type',1,'p_Type','clase0206.py',123),
  ('Type -> CHAR','Type',1,'p_Type','clase0206.py',124),
  ('FunctionReturnType -> Type','FunctionReturnType',1,'p_FunctionReturnType','clase0206.py',130),
  ('FunctionReturnType -> VOID','FunctionReturnType',1,'p_FunctionReturnType','clase0206.py',131),
  ('Statements -> Statement Statements','Statements',2,'p_Statements','clase0206.py',137),
  ('Statements -> empty','Statements',1,'p_Statements','clase0206.py',138),
  ('Statement -> Assignment','Statement',1,'p_Statement','clase0206.py',145),
  ('Statement -> IfStatement','Statement',1,'p_Statement','clase0206.py',146),
  ('Statement -> WhileStatement','Statement',1,'p_Statement','clase0206.py',147),
  ('Statement -> ForStatement','Statement',1,'p_Statement','clase0206.py',148),
  ('Statement -> ;','Statement',1,'p_Statement','clase0206.py',149),
  ('Statement -> Block','Statement',1,'p_Statement','clase0206.py',150),
  ('Block -> { Statements }','Block',3,'p_Block','clase0206.py',156),
  ('IfStatement -> IF ( Expression ) Statement ELSE Statement','IfStatement',7,'p_IfStatement','clase0206.py',162),
  ('WhileStatement -> WHILE ( Expression ) Statement','WhileStatement',5,'p_WhileStatement','clase0206.py',168),
  ('ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement','ForStatement',8,'p_ForStatement','clase0206.py',174),
  ('Assignment -> ID = Expression ;','Assignment',4,'p_Assignment','clase0206.py',180),
  ('Expression -> Conjunction','Expression',1,'p_Expression','clase0206.py',186),
  ('Expression -> Expression OR Conjunction','Expression',3,'p_Expression','clase0206.py',187),
  ('Conjunction -> Equality','Conjunction',1,'p_Conjunction','clase0206.py',196),
  ('Conjunction -> Conjunction AND Equality','Conjunction',3,'p_Conjunction','clase0206.py',197),
  ('Equality -> Relation','Equality',1,'p_Equality','clase0206.py',206),
  ('Equality -> Relation EquOp Relation','Equality',3,'p_Equality','clase0206.py',207),
  ('EquOp -> EQ','EquOp',1,'p_EquOp','clase0206.py',216),
  ('EquOp -> NEQ','EquOp',1,'p_EquOp','clase0206.py',217),
  ('Relation -> Addition','Relation',1,'p_Relation','clase0206.py',223),
  ('Relation -> Addition RelOp Addition','Relation',3,'p_Relation','clase0206.py',224),
  ('RelOp -> <','RelOp',1,'p_RelOp','clase0206.py',233),
  ('RelOp -> LTE','RelOp',1,'p_RelOp','clase0206.py',234),
  ('RelOp -> >','RelOp',1,'p_RelOp','clase0206.py',235),
  ('RelOp -> GTE','RelOp',1,'p_RelOp','clase0206.py',236),
  ('Addition -> Term','Addition',1,'p_Addition','clase0206.py',242),
  ('Addition -> Addition AddOp Term','Addition',3,'p_Addition','clase0206.py',243),
  ('AddOp -> +','AddOp',1,'p_AddOp','clase0206.py',252),
  ('AddOp -> -','AddOp',1,'p_AddOp','clase0206.py',253),
  ('Term -> Factor','Term',1,'p_Term','clase0206.py',259),
  ('Term -> Term MulOp Primary','Term',3,'p_Term','clase0206.py',260),
  ('MulOp -> *','MulOp',1,'p_MulOp','clase0206.py',269),
  ('MulOp -> /','MulOp',1,'p_MulOp','clase0206.py',270),
  ('MulOp -> %','MulOp',1,'p_MulOp','clase0206.py',271),
  ('Factor -> Primary','Factor',1,'p_Factor','clase0206.py',277),
  ('Factor -> UnaryOp Primary','Factor',2,'p_Factor','clase0206.py',278),
  ('UnaryOp -> -','UnaryOp',1,'p_UnaryOp','clase0206.py',291),
  ('UnaryOp -> !','UnaryOp',1,'p_UnaryOp','clase0206.py',292),
  ('Primary -> INTLIT','Primary',1,'p_Primary_IntLit','clase0206.py',297),
  ('Primary -> ID','Primary',1,'p_Primary_Id','clase0206.py',301),
  ('Primary -> ID ( )','Primary',3,'p_Primary_FunctionCall','clase0206.py',306),
  ('Primary -> ID ( Primary )','Primary',4,'p_Primary_FunctionCall','clase0206.py',307),
]
