
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOL CHAR ELSE EQ FLOAT FOR GTE ID IF INT INTLIT LTE NEQ OR RETURN WHILE\n    Program : Function\n    \n    Function : Type ID '(' ')' '{' Declarations Statements ReturnStatement '}'\n    \n    ReturnStatement : RETURN Expression ';'\n    \n    empty :\n    \n    Declarations : Declaration Declarations\n                 | empty\n    \n    Declaration : Type ID ';'\n    \n    Type : INT\n         | BOOL\n         | FLOAT\n         | CHAR\n    \n    Statements : Statement Statements\n               | empty\n    \n    Statement : Assignment\n              | IfStatement\n              | WhileStatement\n              | ForStatement\n              | ';'\n              | Block\n    \n    Block : '{' Statements '}'\n    \n    IfStatement : IF '(' Expression ')' Statement ELSE Statement\n    \n    WhileStatement : WHILE '(' Expression ')' Statement\n    \n    ForStatement : FOR '(' Assignment Expression ';' Assignment ')' Statement\n    \n    Assignment : ID '=' Expression ';'\n    \n    Expression : Conjunction\n               | Expression OR Conjunction\n    \n    Conjunction : Equality\n                | Conjunction AND Equality\n    \n    Equality : Relation\n             | Relation EquOp Relation\n    \n    EquOp : EQ\n          | NEQ\n    \n    Relation : Addition\n             | Addition RelOp Addition \n    \n    RelOp : '<'\n          | LTE\n          | '>'\n          | GTE\n    \n    Addition : Term\n             | Addition AddOp Term\n    \n    AddOp : '+'\n          | '-'\n    \n    Term : Factor\n         | Term MulOp Primary\n    \n    MulOp : '*'\n          | '/'\n          | '%'\n    \n    Factor : Primary\n           | UnaryOp Primary\n    \n    UnaryOp : '-'\n            | '!'\n    Primary : INTLITPrimary : ID"
    
_lr_action_items = {'INT':([0,11,14,32,],[4,4,4,-7,]),'BOOL':([0,11,14,32,],[5,5,5,-7,]),'FLOAT':([0,11,14,32,],[6,6,6,-7,]),'CHAR':([0,11,14,32,],[7,7,7,-7,]),'$end':([1,2,55,],[0,-1,-2,]),'ID':([3,4,5,6,7,11,12,13,14,15,18,20,22,23,24,25,26,27,31,32,33,36,38,39,40,50,52,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,90,91,92,94,95,96,],[8,-8,-9,-10,-11,-4,16,17,-4,-6,17,17,-14,-15,-16,-17,-18,-19,-5,-7,41,41,41,41,17,41,-50,-51,-20,41,-24,41,41,41,-31,-32,41,41,-35,-36,-37,-38,-41,-42,41,-45,-46,-47,17,17,-22,17,17,-21,17,-23,]),'(':([8,28,29,30,],[9,38,39,40,]),')':([9,41,43,44,45,46,47,48,49,51,57,58,60,78,83,84,85,86,87,88,93,],[10,-53,-25,-27,-29,-33,-39,-43,-48,-52,80,81,-24,-49,-26,-28,-30,-34,-40,-44,95,]),'{':([10,11,13,14,15,18,20,22,23,24,25,26,27,31,32,54,60,80,81,90,92,94,95,96,],[11,-4,18,-4,-6,18,18,-14,-15,-16,-17,-18,-19,-5,-7,-20,-24,18,18,-22,18,-21,18,-23,]),';':([11,13,14,15,16,18,20,22,23,24,25,26,27,31,32,41,42,43,44,45,46,47,48,49,51,54,56,60,78,80,81,82,83,84,85,86,87,88,90,92,94,95,96,],[-4,26,-4,-6,32,26,26,-14,-15,-16,-17,-18,-19,-5,-7,-53,60,-25,-27,-29,-33,-39,-43,-48,-52,-20,79,-24,-49,26,26,91,-26,-28,-30,-34,-40,-44,-22,26,-21,26,-23,]),'IF':([11,13,14,15,18,20,22,23,24,25,26,27,31,32,54,60,80,81,90,92,94,95,96,],[-4,28,-4,-6,28,28,-14,-15,-16,-17,-18,-19,-5,-7,-20,-24,28,28,-22,28,-21,28,-23,]),'WHILE':([11,13,14,15,18,20,22,23,24,25,26,27,31,32,54,60,80,81,90,92,94,95,96,],[-4,29,-4,-6,29,29,-14,-15,-16,-17,-18,-19,-5,-7,-20,-24,29,29,-22,29,-21,29,-23,]),'FOR':([11,13,14,15,18,20,22,23,24,25,26,27,31,32,54,60,80,81,90,92,94,95,96,],[-4,30,-4,-6,30,30,-14,-15,-16,-17,-18,-19,-5,-7,-20,-24,30,30,-22,30,-21,30,-23,]),'RETURN':([11,13,14,15,19,20,21,22,23,24,25,26,27,31,32,37,54,60,90,94,96,],[-4,-4,-4,-6,36,-4,-13,-14,-15,-16,-17,-18,-19,-5,-7,-12,-20,-24,-22,-21,-23,]),'=':([17,],[33,]),'}':([18,20,21,22,23,24,25,26,27,34,35,37,54,60,79,90,94,96,],[-4,-4,-13,-14,-15,-16,-17,-18,-19,54,55,-12,-20,-24,-3,-22,-21,-23,]),'ELSE':([22,23,24,25,26,27,54,60,89,90,94,96,],[-14,-15,-16,-17,-18,-19,-20,-24,92,-22,-21,-23,]),'INTLIT':([33,36,38,39,50,52,53,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[51,51,51,51,51,-50,-51,51,-24,51,51,51,-31,-32,51,51,-35,-36,-37,-38,-41,-42,51,-45,-46,-47,]),'-':([33,36,38,39,41,46,47,48,49,51,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,78,86,87,88,],[52,52,52,52,-53,73,-39,-43,-48,-52,52,-24,52,52,52,-31,-32,52,52,-35,-36,-37,-38,-41,-42,-49,73,-40,-44,]),'!':([33,36,38,39,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[53,53,53,53,53,-24,53,53,53,-31,-32,53,53,-35,-36,-37,-38,-41,-42,]),'*':([41,47,48,49,51,78,87,88,],[-53,75,-43,-48,-52,-49,75,-44,]),'/':([41,47,48,49,51,78,87,88,],[-53,76,-43,-48,-52,-49,76,-44,]),'%':([41,47,48,49,51,78,87,88,],[-53,77,-43,-48,-52,-49,77,-44,]),'<':([41,46,47,48,49,51,78,87,88,],[-53,68,-39,-43,-48,-52,-49,-40,-44,]),'LTE':([41,46,47,48,49,51,78,87,88,],[-53,69,-39,-43,-48,-52,-49,-40,-44,]),'>':([41,46,47,48,49,51,78,87,88,],[-53,70,-39,-43,-48,-52,-49,-40,-44,]),'GTE':([41,46,47,48,49,51,78,87,88,],[-53,71,-39,-43,-48,-52,-49,-40,-44,]),'+':([41,46,47,48,49,51,78,86,87,88,],[-53,72,-39,-43,-48,-52,-49,72,-40,-44,]),'EQ':([41,45,46,47,48,49,51,78,86,87,88,],[-53,64,-33,-39,-43,-48,-52,-49,-34,-40,-44,]),'NEQ':([41,45,46,47,48,49,51,78,86,87,88,],[-53,65,-33,-39,-43,-48,-52,-49,-34,-40,-44,]),'AND':([41,43,44,45,46,47,48,49,51,78,83,84,85,86,87,88,],[-53,62,-27,-29,-33,-39,-43,-48,-52,-49,62,-28,-30,-34,-40,-44,]),'OR':([41,42,43,44,45,46,47,48,49,51,56,57,58,78,82,83,84,85,86,87,88,],[-53,61,-25,-27,-29,-33,-39,-43,-48,-52,61,61,61,-49,61,-26,-28,-30,-34,-40,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'Function':([0,],[2,]),'Type':([0,11,14,],[3,12,12,]),'Declarations':([11,14,],[13,31,]),'Declaration':([11,14,],[14,14,]),'empty':([11,13,14,18,20,],[15,21,15,21,21,]),'Statements':([13,18,20,],[19,34,37,]),'Statement':([13,18,20,80,81,92,95,],[20,20,20,89,90,94,96,]),'Assignment':([13,18,20,40,80,81,91,92,95,],[22,22,22,59,22,22,93,22,22,]),'IfStatement':([13,18,20,80,81,92,95,],[23,23,23,23,23,23,23,]),'WhileStatement':([13,18,20,80,81,92,95,],[24,24,24,24,24,24,24,]),'ForStatement':([13,18,20,80,81,92,95,],[25,25,25,25,25,25,25,]),'Block':([13,18,20,80,81,92,95,],[27,27,27,27,27,27,27,]),'ReturnStatement':([19,],[35,]),'Expression':([33,36,38,39,59,],[42,56,57,58,82,]),'Conjunction':([33,36,38,39,59,61,],[43,43,43,43,43,83,]),'Equality':([33,36,38,39,59,61,62,],[44,44,44,44,44,44,84,]),'Relation':([33,36,38,39,59,61,62,63,],[45,45,45,45,45,45,45,85,]),'Addition':([33,36,38,39,59,61,62,63,66,],[46,46,46,46,46,46,46,46,86,]),'Term':([33,36,38,39,59,61,62,63,66,67,],[47,47,47,47,47,47,47,47,47,87,]),'Factor':([33,36,38,39,59,61,62,63,66,67,],[48,48,48,48,48,48,48,48,48,48,]),'Primary':([33,36,38,39,50,59,61,62,63,66,67,74,],[49,49,49,49,78,49,49,49,49,49,49,88,]),'UnaryOp':([33,36,38,39,59,61,62,63,66,67,],[50,50,50,50,50,50,50,50,50,50,]),'EquOp':([45,],[63,]),'RelOp':([46,],[66,]),'AddOp':([46,86,],[67,67,]),'MulOp':([47,87,],[74,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Function','Program',1,'p_Program','clase0206.py',55),
  ('Function -> Type ID ( ) { Declarations Statements ReturnStatement }','Function',9,'p_Function','clase0206.py',61),
  ('ReturnStatement -> RETURN Expression ;','ReturnStatement',3,'p_ReturnStatement','clase0206.py',67),
  ('empty -> <empty>','empty',0,'p_empty','clase0206.py',73),
  ('Declarations -> Declaration Declarations','Declarations',2,'p_Declarations','clase0206.py',79),
  ('Declarations -> empty','Declarations',1,'p_Declarations','clase0206.py',80),
  ('Declaration -> Type ID ;','Declaration',3,'p_Declaration','clase0206.py',87),
  ('Type -> INT','Type',1,'p_Type','clase0206.py',93),
  ('Type -> BOOL','Type',1,'p_Type','clase0206.py',94),
  ('Type -> FLOAT','Type',1,'p_Type','clase0206.py',95),
  ('Type -> CHAR','Type',1,'p_Type','clase0206.py',96),
  ('Statements -> Statement Statements','Statements',2,'p_Statements','clase0206.py',102),
  ('Statements -> empty','Statements',1,'p_Statements','clase0206.py',103),
  ('Statement -> Assignment','Statement',1,'p_Statement','clase0206.py',110),
  ('Statement -> IfStatement','Statement',1,'p_Statement','clase0206.py',111),
  ('Statement -> WhileStatement','Statement',1,'p_Statement','clase0206.py',112),
  ('Statement -> ForStatement','Statement',1,'p_Statement','clase0206.py',113),
  ('Statement -> ;','Statement',1,'p_Statement','clase0206.py',114),
  ('Statement -> Block','Statement',1,'p_Statement','clase0206.py',115),
  ('Block -> { Statements }','Block',3,'p_Block','clase0206.py',121),
  ('IfStatement -> IF ( Expression ) Statement ELSE Statement','IfStatement',7,'p_IfStatement','clase0206.py',127),
  ('WhileStatement -> WHILE ( Expression ) Statement','WhileStatement',5,'p_WhileStatement','clase0206.py',133),
  ('ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement','ForStatement',8,'p_ForStatement','clase0206.py',139),
  ('Assignment -> ID = Expression ;','Assignment',4,'p_Assignment','clase0206.py',145),
  ('Expression -> Conjunction','Expression',1,'p_Expression','clase0206.py',151),
  ('Expression -> Expression OR Conjunction','Expression',3,'p_Expression','clase0206.py',152),
  ('Conjunction -> Equality','Conjunction',1,'p_Conjunction','clase0206.py',161),
  ('Conjunction -> Conjunction AND Equality','Conjunction',3,'p_Conjunction','clase0206.py',162),
  ('Equality -> Relation','Equality',1,'p_Equality','clase0206.py',171),
  ('Equality -> Relation EquOp Relation','Equality',3,'p_Equality','clase0206.py',172),
  ('EquOp -> EQ','EquOp',1,'p_EquOp','clase0206.py',181),
  ('EquOp -> NEQ','EquOp',1,'p_EquOp','clase0206.py',182),
  ('Relation -> Addition','Relation',1,'p_Relation','clase0206.py',188),
  ('Relation -> Addition RelOp Addition','Relation',3,'p_Relation','clase0206.py',189),
  ('RelOp -> <','RelOp',1,'p_RelOp','clase0206.py',198),
  ('RelOp -> LTE','RelOp',1,'p_RelOp','clase0206.py',199),
  ('RelOp -> >','RelOp',1,'p_RelOp','clase0206.py',200),
  ('RelOp -> GTE','RelOp',1,'p_RelOp','clase0206.py',201),
  ('Addition -> Term','Addition',1,'p_Addition','clase0206.py',207),
  ('Addition -> Addition AddOp Term','Addition',3,'p_Addition','clase0206.py',208),
  ('AddOp -> +','AddOp',1,'p_AddOp','clase0206.py',217),
  ('AddOp -> -','AddOp',1,'p_AddOp','clase0206.py',218),
  ('Term -> Factor','Term',1,'p_Term','clase0206.py',224),
  ('Term -> Term MulOp Primary','Term',3,'p_Term','clase0206.py',225),
  ('MulOp -> *','MulOp',1,'p_MulOp','clase0206.py',234),
  ('MulOp -> /','MulOp',1,'p_MulOp','clase0206.py',235),
  ('MulOp -> %','MulOp',1,'p_MulOp','clase0206.py',236),
  ('Factor -> Primary','Factor',1,'p_Factor','clase0206.py',242),
  ('Factor -> UnaryOp Primary','Factor',2,'p_Factor','clase0206.py',243),
  ('UnaryOp -> -','UnaryOp',1,'p_UnaryOp','clase0206.py',259),
  ('UnaryOp -> !','UnaryOp',1,'p_UnaryOp','clase0206.py',260),
  ('Primary -> INTLIT','Primary',1,'p_Primary_IntLit','clase0206.py',265),
  ('Primary -> ID','Primary',1,'p_Primary_Id','clase0206.py',269),
]
