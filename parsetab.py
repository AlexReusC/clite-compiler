
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ELSE EQ FLOAT GTE ID IF INT INTLIT LTE MAIN NEQ OR RETURN WHILE\n    Program : INT MAIN '(' ')' '{' Declarations Statements '}'\n    \n    Declarations : Declaration\n    \n    Declaration : INT ID ';'\n    \n    Statements : Statement\n    \n    Statement : Assignment\n    \n    Assignment : ID '=' Expression ';'\n    \n    Expression : Conjunction\n    \n    Conjunction : Equality\n    \n    Equality : Relation\n    \n    Relation : Addition\n             | Relation '<' Addition \n    \n    Addition : Factor\n    \n    Factor : Primary\n           | Factor '*' Primary\n    Primary : INTLITPrimary : ID"
    
_lr_action_items = {'INT':([0,6,],[2,7,]),'$end':([1,16,],[0,-1,]),'MAIN':([2,],[3,]),'(':([3,],[4,]),')':([4,],[5,]),'{':([5,],[6,]),'ID':([7,8,9,15,17,28,29,],[10,14,-2,-3,18,18,18,]),';':([10,18,19,20,21,22,23,24,25,26,30,31,],[15,-16,27,-7,-8,-9,-10,-12,-13,-15,-11,-14,]),'}':([11,12,13,27,],[16,-4,-5,-6,]),'=':([14,],[17,]),'INTLIT':([17,28,29,],[26,26,26,]),'*':([18,24,25,26,31,],[-16,29,-13,-15,-14,]),'<':([18,22,23,24,25,26,30,31,],[-16,28,-10,-12,-13,-15,-11,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'Declarations':([6,],[8,]),'Declaration':([6,],[9,]),'Statements':([8,],[11,]),'Statement':([8,],[12,]),'Assignment':([8,],[13,]),'Expression':([17,],[19,]),'Conjunction':([17,],[20,]),'Equality':([17,],[21,]),'Relation':([17,],[22,]),'Addition':([17,28,],[23,30,]),'Factor':([17,28,],[24,24,]),'Primary':([17,28,29,],[25,25,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> INT MAIN ( ) { Declarations Statements }','Program',8,'p_Program','clase0206.py',51),
  ('Declarations -> Declaration','Declarations',1,'p_Declarations','clase0206.py',63),
  ('Declaration -> INT ID ;','Declaration',3,'p_Declaration','clase0206.py',75),
  ('Statements -> Statement','Statements',1,'p_Statements','clase0206.py',81),
  ('Statement -> Assignment','Statement',1,'p_Statement','clase0206.py',87),
  ('Assignment -> ID = Expression ;','Assignment',4,'p_Assignment','clase0206.py',93),
  ('Expression -> Conjunction','Expression',1,'p_Expression','clase0206.py',99),
  ('Conjunction -> Equality','Conjunction',1,'p_Conjunction','clase0206.py',105),
  ('Equality -> Relation','Equality',1,'p_Equality','clase0206.py',111),
  ('Relation -> Addition','Relation',1,'p_Relation','clase0206.py',117),
  ('Relation -> Relation < Addition','Relation',3,'p_Relation','clase0206.py',118),
  ('Addition -> Factor','Addition',1,'p_Addition','clase0206.py',127),
  ('Factor -> Primary','Factor',1,'p_Factor','clase0206.py',133),
  ('Factor -> Factor * Primary','Factor',3,'p_Factor','clase0206.py',134),
  ('Primary -> INTLIT','Primary',1,'p_Primary_IntLit','clase0206.py',142),
  ('Primary -> ID','Primary',1,'p_Primary_Id','clase0206.py',146),
]
