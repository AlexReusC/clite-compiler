
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND BOOL CHAR ELSE EQ FLOAT FOR GTE ID IF INT INTLIT LTE NEQ OR RETURN VOID WHILE\n    Program : Function Program\n            | empty\n    \n    Function : Type ID '(' ')' '{' Declarations Statements ReturnStatement '}'\n    \n    ReturnStatement : RETURN Expression ';'\n                    | RETURN ';'\n    \n    empty :\n    \n    Declarations : Declaration Declarations\n                 | empty\n    \n    Declaration : Type ID ';'\n    \n    Type : INT\n         | BOOL\n         | FLOAT\n         | CHAR\n    \n    FunctionReturnType : Type\n                       | VOID\n    \n    Statements : Statement Statements\n               | empty\n    \n    Statement : Assignment\n              | IfStatement\n              | WhileStatement\n              | ForStatement\n              | ';'\n              | Block\n    \n    Block : '{' Statements '}'\n    \n    IfStatement : IF '(' Expression ')' Statement ELSE Statement\n    \n    WhileStatement : WHILE '(' Expression ')' Statement\n    \n    ForStatement : FOR '(' Assignment Expression ';' Assignment ')' Statement\n    \n    Assignment : ID '=' Expression ';'\n    \n    Expression : Conjunction\n               | Expression OR Conjunction\n    \n    Conjunction : Equality\n                | Conjunction AND Equality\n    \n    Equality : Relation\n             | Relation EquOp Relation\n    \n    EquOp : EQ\n          | NEQ\n    \n    Relation : Addition\n             | Addition RelOp Addition \n    \n    RelOp : '<'\n          | LTE\n          | '>'\n          | GTE\n    \n    Addition : Term\n             | Addition AddOp Term\n    \n    AddOp : '+'\n          | '-'\n    \n    Term : Factor\n         | Term MulOp Primary\n    \n    MulOp : '*'\n          | '/'\n          | '%'\n    \n    Factor : Primary\n           | UnaryOp Primary\n    \n    UnaryOp : '-'\n            | '!'\n    Primary : INTLITPrimary : ID\n    Primary : ID '(' ')'\n    "
    
_lr_action_items = {'$end':([0,1,2,3,9,57,],[-6,0,-6,-2,-1,-3,]),'INT':([0,2,13,16,34,57,],[5,5,5,5,-9,-3,]),'BOOL':([0,2,13,16,34,57,],[6,6,6,6,-9,-3,]),'FLOAT':([0,2,13,16,34,57,],[7,7,7,7,-9,-3,]),'CHAR':([0,2,13,16,34,57,],[8,8,8,8,-9,-3,]),'ID':([4,5,6,7,8,13,14,15,16,17,20,22,24,25,26,27,28,29,33,34,35,38,40,41,42,52,54,55,56,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,95,96,97,99,100,101,],[10,-10,-11,-12,-13,-6,18,19,-6,-8,19,19,-18,-19,-20,-21,-22,-23,-7,-9,43,43,43,43,19,43,-54,-55,-24,43,-28,43,43,43,-35,-36,43,43,-39,-40,-41,-42,-45,-46,43,-49,-50,-51,19,19,-26,19,19,-25,19,-27,]),'(':([10,30,31,32,43,],[11,40,41,42,63,]),')':([11,43,45,46,47,48,49,50,51,53,60,61,63,64,82,87,88,89,90,91,92,93,98,],[12,-57,-29,-31,-33,-37,-43,-47,-52,-56,84,85,87,-28,-53,-58,-30,-32,-34,-38,-44,-48,100,]),'{':([12,13,15,16,17,20,22,24,25,26,27,28,29,33,34,56,64,84,85,95,97,99,100,101,],[13,-6,20,-6,-8,20,20,-18,-19,-20,-21,-22,-23,-7,-9,-24,-28,20,20,-26,20,-25,20,-27,]),';':([13,15,16,17,18,20,22,24,25,26,27,28,29,33,34,38,43,44,45,46,47,48,49,50,51,53,56,58,64,82,84,85,86,87,88,89,90,91,92,93,95,97,99,100,101,],[-6,28,-6,-8,34,28,28,-18,-19,-20,-21,-22,-23,-7,-9,59,-57,64,-29,-31,-33,-37,-43,-47,-52,-56,-24,83,-28,-53,28,28,96,-58,-30,-32,-34,-38,-44,-48,-26,28,-25,28,-27,]),'IF':([13,15,16,17,20,22,24,25,26,27,28,29,33,34,56,64,84,85,95,97,99,100,101,],[-6,30,-6,-8,30,30,-18,-19,-20,-21,-22,-23,-7,-9,-24,-28,30,30,-26,30,-25,30,-27,]),'WHILE':([13,15,16,17,20,22,24,25,26,27,28,29,33,34,56,64,84,85,95,97,99,100,101,],[-6,31,-6,-8,31,31,-18,-19,-20,-21,-22,-23,-7,-9,-24,-28,31,31,-26,31,-25,31,-27,]),'FOR':([13,15,16,17,20,22,24,25,26,27,28,29,33,34,56,64,84,85,95,97,99,100,101,],[-6,32,-6,-8,32,32,-18,-19,-20,-21,-22,-23,-7,-9,-24,-28,32,32,-26,32,-25,32,-27,]),'RETURN':([13,15,16,17,21,22,23,24,25,26,27,28,29,33,34,39,56,64,95,99,101,],[-6,-6,-6,-8,38,-6,-17,-18,-19,-20,-21,-22,-23,-7,-9,-16,-24,-28,-26,-25,-27,]),'=':([19,],[35,]),'}':([20,22,23,24,25,26,27,28,29,36,37,39,56,59,64,83,95,99,101,],[-6,-6,-17,-18,-19,-20,-21,-22,-23,56,57,-16,-24,-5,-28,-4,-26,-25,-27,]),'ELSE':([24,25,26,27,28,29,56,64,94,95,99,101,],[-18,-19,-20,-21,-22,-23,-24,-28,97,-26,-25,-27,]),'INTLIT':([35,38,40,41,52,54,55,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,],[53,53,53,53,53,-54,-55,53,-28,53,53,53,-35,-36,53,53,-39,-40,-41,-42,-45,-46,53,-49,-50,-51,]),'-':([35,38,40,41,43,48,49,50,51,53,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,87,91,92,93,],[54,54,54,54,-57,77,-43,-47,-52,-56,54,-28,54,54,54,-35,-36,54,54,-39,-40,-41,-42,-45,-46,-53,-58,77,-44,-48,]),'!':([35,38,40,41,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[55,55,55,55,55,-28,55,55,55,-35,-36,55,55,-39,-40,-41,-42,-45,-46,]),'*':([43,49,50,51,53,82,87,92,93,],[-57,79,-47,-52,-56,-53,-58,79,-48,]),'/':([43,49,50,51,53,82,87,92,93,],[-57,80,-47,-52,-56,-53,-58,80,-48,]),'%':([43,49,50,51,53,82,87,92,93,],[-57,81,-47,-52,-56,-53,-58,81,-48,]),'<':([43,48,49,50,51,53,82,87,92,93,],[-57,72,-43,-47,-52,-56,-53,-58,-44,-48,]),'LTE':([43,48,49,50,51,53,82,87,92,93,],[-57,73,-43,-47,-52,-56,-53,-58,-44,-48,]),'>':([43,48,49,50,51,53,82,87,92,93,],[-57,74,-43,-47,-52,-56,-53,-58,-44,-48,]),'GTE':([43,48,49,50,51,53,82,87,92,93,],[-57,75,-43,-47,-52,-56,-53,-58,-44,-48,]),'+':([43,48,49,50,51,53,82,87,91,92,93,],[-57,76,-43,-47,-52,-56,-53,-58,76,-44,-48,]),'EQ':([43,47,48,49,50,51,53,82,87,91,92,93,],[-57,68,-37,-43,-47,-52,-56,-53,-58,-38,-44,-48,]),'NEQ':([43,47,48,49,50,51,53,82,87,91,92,93,],[-57,69,-37,-43,-47,-52,-56,-53,-58,-38,-44,-48,]),'AND':([43,45,46,47,48,49,50,51,53,82,87,88,89,90,91,92,93,],[-57,66,-31,-33,-37,-43,-47,-52,-56,-53,-58,66,-32,-34,-38,-44,-48,]),'OR':([43,44,45,46,47,48,49,50,51,53,58,60,61,82,86,87,88,89,90,91,92,93,],[-57,65,-29,-31,-33,-37,-43,-47,-52,-56,65,65,65,-53,65,-58,-30,-32,-34,-38,-44,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,2,],[1,9,]),'Function':([0,2,],[2,2,]),'empty':([0,2,13,15,16,20,22,],[3,3,17,23,17,23,23,]),'Type':([0,2,13,16,],[4,4,14,14,]),'Declarations':([13,16,],[15,33,]),'Declaration':([13,16,],[16,16,]),'Statements':([15,20,22,],[21,36,39,]),'Statement':([15,20,22,84,85,97,100,],[22,22,22,94,95,99,101,]),'Assignment':([15,20,22,42,84,85,96,97,100,],[24,24,24,62,24,24,98,24,24,]),'IfStatement':([15,20,22,84,85,97,100,],[25,25,25,25,25,25,25,]),'WhileStatement':([15,20,22,84,85,97,100,],[26,26,26,26,26,26,26,]),'ForStatement':([15,20,22,84,85,97,100,],[27,27,27,27,27,27,27,]),'Block':([15,20,22,84,85,97,100,],[29,29,29,29,29,29,29,]),'ReturnStatement':([21,],[37,]),'Expression':([35,38,40,41,62,],[44,58,60,61,86,]),'Conjunction':([35,38,40,41,62,65,],[45,45,45,45,45,88,]),'Equality':([35,38,40,41,62,65,66,],[46,46,46,46,46,46,89,]),'Relation':([35,38,40,41,62,65,66,67,],[47,47,47,47,47,47,47,90,]),'Addition':([35,38,40,41,62,65,66,67,70,],[48,48,48,48,48,48,48,48,91,]),'Term':([35,38,40,41,62,65,66,67,70,71,],[49,49,49,49,49,49,49,49,49,92,]),'Factor':([35,38,40,41,62,65,66,67,70,71,],[50,50,50,50,50,50,50,50,50,50,]),'Primary':([35,38,40,41,52,62,65,66,67,70,71,78,],[51,51,51,51,82,51,51,51,51,51,51,93,]),'UnaryOp':([35,38,40,41,62,65,66,67,70,71,],[52,52,52,52,52,52,52,52,52,52,]),'EquOp':([47,],[67,]),'RelOp':([48,],[70,]),'AddOp':([48,91,],[71,71,]),'MulOp':([49,92,],[78,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Function Program','Program',2,'p_Program','clase0206.py',56),
  ('Program -> empty','Program',1,'p_Program','clase0206.py',57),
  ('Function -> Type ID ( ) { Declarations Statements ReturnStatement }','Function',9,'p_Function','clase0206.py',64),
  ('ReturnStatement -> RETURN Expression ;','ReturnStatement',3,'p_ReturnStatement','clase0206.py',70),
  ('ReturnStatement -> RETURN ;','ReturnStatement',2,'p_ReturnStatement','clase0206.py',71),
  ('empty -> <empty>','empty',0,'p_empty','clase0206.py',80),
  ('Declarations -> Declaration Declarations','Declarations',2,'p_Declarations','clase0206.py',86),
  ('Declarations -> empty','Declarations',1,'p_Declarations','clase0206.py',87),
  ('Declaration -> Type ID ;','Declaration',3,'p_Declaration','clase0206.py',94),
  ('Type -> INT','Type',1,'p_Type','clase0206.py',100),
  ('Type -> BOOL','Type',1,'p_Type','clase0206.py',101),
  ('Type -> FLOAT','Type',1,'p_Type','clase0206.py',102),
  ('Type -> CHAR','Type',1,'p_Type','clase0206.py',103),
  ('FunctionReturnType -> Type','FunctionReturnType',1,'p_FunctionReturnType','clase0206.py',109),
  ('FunctionReturnType -> VOID','FunctionReturnType',1,'p_FunctionReturnType','clase0206.py',110),
  ('Statements -> Statement Statements','Statements',2,'p_Statements','clase0206.py',116),
  ('Statements -> empty','Statements',1,'p_Statements','clase0206.py',117),
  ('Statement -> Assignment','Statement',1,'p_Statement','clase0206.py',124),
  ('Statement -> IfStatement','Statement',1,'p_Statement','clase0206.py',125),
  ('Statement -> WhileStatement','Statement',1,'p_Statement','clase0206.py',126),
  ('Statement -> ForStatement','Statement',1,'p_Statement','clase0206.py',127),
  ('Statement -> ;','Statement',1,'p_Statement','clase0206.py',128),
  ('Statement -> Block','Statement',1,'p_Statement','clase0206.py',129),
  ('Block -> { Statements }','Block',3,'p_Block','clase0206.py',135),
  ('IfStatement -> IF ( Expression ) Statement ELSE Statement','IfStatement',7,'p_IfStatement','clase0206.py',141),
  ('WhileStatement -> WHILE ( Expression ) Statement','WhileStatement',5,'p_WhileStatement','clase0206.py',147),
  ('ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement','ForStatement',8,'p_ForStatement','clase0206.py',153),
  ('Assignment -> ID = Expression ;','Assignment',4,'p_Assignment','clase0206.py',159),
  ('Expression -> Conjunction','Expression',1,'p_Expression','clase0206.py',165),
  ('Expression -> Expression OR Conjunction','Expression',3,'p_Expression','clase0206.py',166),
  ('Conjunction -> Equality','Conjunction',1,'p_Conjunction','clase0206.py',175),
  ('Conjunction -> Conjunction AND Equality','Conjunction',3,'p_Conjunction','clase0206.py',176),
  ('Equality -> Relation','Equality',1,'p_Equality','clase0206.py',185),
  ('Equality -> Relation EquOp Relation','Equality',3,'p_Equality','clase0206.py',186),
  ('EquOp -> EQ','EquOp',1,'p_EquOp','clase0206.py',195),
  ('EquOp -> NEQ','EquOp',1,'p_EquOp','clase0206.py',196),
  ('Relation -> Addition','Relation',1,'p_Relation','clase0206.py',202),
  ('Relation -> Addition RelOp Addition','Relation',3,'p_Relation','clase0206.py',203),
  ('RelOp -> <','RelOp',1,'p_RelOp','clase0206.py',212),
  ('RelOp -> LTE','RelOp',1,'p_RelOp','clase0206.py',213),
  ('RelOp -> >','RelOp',1,'p_RelOp','clase0206.py',214),
  ('RelOp -> GTE','RelOp',1,'p_RelOp','clase0206.py',215),
  ('Addition -> Term','Addition',1,'p_Addition','clase0206.py',221),
  ('Addition -> Addition AddOp Term','Addition',3,'p_Addition','clase0206.py',222),
  ('AddOp -> +','AddOp',1,'p_AddOp','clase0206.py',231),
  ('AddOp -> -','AddOp',1,'p_AddOp','clase0206.py',232),
  ('Term -> Factor','Term',1,'p_Term','clase0206.py',238),
  ('Term -> Term MulOp Primary','Term',3,'p_Term','clase0206.py',239),
  ('MulOp -> *','MulOp',1,'p_MulOp','clase0206.py',248),
  ('MulOp -> /','MulOp',1,'p_MulOp','clase0206.py',249),
  ('MulOp -> %','MulOp',1,'p_MulOp','clase0206.py',250),
  ('Factor -> Primary','Factor',1,'p_Factor','clase0206.py',256),
  ('Factor -> UnaryOp Primary','Factor',2,'p_Factor','clase0206.py',257),
  ('UnaryOp -> -','UnaryOp',1,'p_UnaryOp','clase0206.py',273),
  ('UnaryOp -> !','UnaryOp',1,'p_UnaryOp','clase0206.py',274),
  ('Primary -> INTLIT','Primary',1,'p_Primary_IntLit','clase0206.py',279),
  ('Primary -> ID','Primary',1,'p_Primary_Id','clase0206.py',283),
  ('Primary -> ID ( )','Primary',3,'p_Primary_FunctionCall','clase0206.py',288),
]
