Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Function Program
Rule 2     Program -> empty
Rule 3     Function -> Type ID ( ) { Declarations Statements ReturnStatement }
Rule 4     ReturnStatement -> RETURN Expression ;
Rule 5     empty -> <empty>
Rule 6     Declarations -> Declaration Declarations
Rule 7     Declarations -> empty
Rule 8     Declaration -> Type ID ;
Rule 9     Type -> INT
Rule 10    Type -> BOOL
Rule 11    Type -> FLOAT
Rule 12    Type -> CHAR
Rule 13    Statements -> Statement Statements
Rule 14    Statements -> empty
Rule 15    Statement -> Assignment
Rule 16    Statement -> IfStatement
Rule 17    Statement -> WhileStatement
Rule 18    Statement -> ForStatement
Rule 19    Statement -> ;
Rule 20    Statement -> Block
Rule 21    Block -> { Statements }
Rule 22    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 23    WhileStatement -> WHILE ( Expression ) Statement
Rule 24    ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement
Rule 25    Assignment -> ID = Expression ;
Rule 26    Expression -> Conjunction
Rule 27    Expression -> Expression OR Conjunction
Rule 28    Conjunction -> Equality
Rule 29    Conjunction -> Conjunction AND Equality
Rule 30    Equality -> Relation
Rule 31    Equality -> Relation EquOp Relation
Rule 32    EquOp -> EQ
Rule 33    EquOp -> NEQ
Rule 34    Relation -> Addition
Rule 35    Relation -> Addition RelOp Addition
Rule 36    RelOp -> <
Rule 37    RelOp -> LTE
Rule 38    RelOp -> >
Rule 39    RelOp -> GTE
Rule 40    Addition -> Term
Rule 41    Addition -> Addition AddOp Term
Rule 42    AddOp -> +
Rule 43    AddOp -> -
Rule 44    Term -> Factor
Rule 45    Term -> Term MulOp Primary
Rule 46    MulOp -> *
Rule 47    MulOp -> /
Rule 48    MulOp -> %
Rule 49    Factor -> Primary
Rule 50    Factor -> UnaryOp Primary
Rule 51    UnaryOp -> -
Rule 52    UnaryOp -> !
Rule 53    Primary -> INTLIT
Rule 54    Primary -> ID

Terminals, with rules where they appear

!                    : 52
%                    : 48
(                    : 3 22 23 24
)                    : 3 22 23 24
*                    : 46
+                    : 42
-                    : 43 51
/                    : 47
;                    : 4 8 19 24 25
<                    : 36
=                    : 25
>                    : 38
AND                  : 29
BOOL                 : 10
CHAR                 : 12
ELSE                 : 22
EQ                   : 32
FLOAT                : 11
FOR                  : 24
GTE                  : 39
ID                   : 3 8 25 54
IF                   : 22
INT                  : 9
INTLIT               : 53
LTE                  : 37
NEQ                  : 33
OR                   : 27
RETURN               : 4
WHILE                : 23
error                : 
{                    : 3 21
}                    : 3 21

Nonterminals, with rules where they appear

AddOp                : 41
Addition             : 34 35 35 41
Assignment           : 15 24 24
Block                : 20
Conjunction          : 26 27 29
Declaration          : 6
Declarations         : 3 6
EquOp                : 31
Equality             : 28 29
Expression           : 4 22 23 24 25 27
Factor               : 44
ForStatement         : 18
Function             : 1
IfStatement          : 16
MulOp                : 45
Primary              : 45 49 50
Program              : 1 0
RelOp                : 35
Relation             : 30 31 31
ReturnStatement      : 3
Statement            : 13 22 22 23 24
Statements           : 3 13 21
Term                 : 40 41 45
Type                 : 3 8
UnaryOp              : 50
WhileStatement       : 17
empty                : 2 7 14

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Function Program
    (2) Program -> . empty
    (3) Function -> . Type ID ( ) { Declarations Statements ReturnStatement }
    (5) empty -> .
    (9) Type -> . INT
    (10) Type -> . BOOL
    (11) Type -> . FLOAT
    (12) Type -> . CHAR

    $end            reduce using rule 5 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Program                        shift and go to state 1
    Function                       shift and go to state 2
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Function . Program
    (1) Program -> . Function Program
    (2) Program -> . empty
    (3) Function -> . Type ID ( ) { Declarations Statements ReturnStatement }
    (5) empty -> .
    (9) Type -> . INT
    (10) Type -> . BOOL
    (11) Type -> . FLOAT
    (12) Type -> . CHAR

    $end            reduce using rule 5 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Function                       shift and go to state 2
    Program                        shift and go to state 9
    empty                          shift and go to state 3
    Type                           shift and go to state 4

state 3

    (2) Program -> empty .

    $end            reduce using rule 2 (Program -> empty .)


state 4

    (3) Function -> Type . ID ( ) { Declarations Statements ReturnStatement }

    ID              shift and go to state 10


state 5

    (9) Type -> INT .

    ID              reduce using rule 9 (Type -> INT .)


state 6

    (10) Type -> BOOL .

    ID              reduce using rule 10 (Type -> BOOL .)


state 7

    (11) Type -> FLOAT .

    ID              reduce using rule 11 (Type -> FLOAT .)


state 8

    (12) Type -> CHAR .

    ID              reduce using rule 12 (Type -> CHAR .)


state 9

    (1) Program -> Function Program .

    $end            reduce using rule 1 (Program -> Function Program .)


state 10

    (3) Function -> Type ID . ( ) { Declarations Statements ReturnStatement }

    (               shift and go to state 11


state 11

    (3) Function -> Type ID ( . ) { Declarations Statements ReturnStatement }

    )               shift and go to state 12


state 12

    (3) Function -> Type ID ( ) . { Declarations Statements ReturnStatement }

    {               shift and go to state 13


state 13

    (3) Function -> Type ID ( ) { . Declarations Statements ReturnStatement }
    (6) Declarations -> . Declaration Declarations
    (7) Declarations -> . empty
    (8) Declaration -> . Type ID ;
    (5) empty -> .
    (9) Type -> . INT
    (10) Type -> . BOOL
    (11) Type -> . FLOAT
    (12) Type -> . CHAR

    ;               reduce using rule 5 (empty -> .)
    ID              reduce using rule 5 (empty -> .)
    IF              reduce using rule 5 (empty -> .)
    WHILE           reduce using rule 5 (empty -> .)
    FOR             reduce using rule 5 (empty -> .)
    {               reduce using rule 5 (empty -> .)
    RETURN          reduce using rule 5 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Type                           shift and go to state 14
    Declarations                   shift and go to state 15
    Declaration                    shift and go to state 16
    empty                          shift and go to state 17

state 14

    (8) Declaration -> Type . ID ;

    ID              shift and go to state 18


state 15

    (3) Function -> Type ID ( ) { Declarations . Statements ReturnStatement }
    (13) Statements -> . Statement Statements
    (14) Statements -> . empty
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (5) empty -> .
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    RETURN          reduce using rule 5 (empty -> .)
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statements                     shift and go to state 21
    Statement                      shift and go to state 22
    empty                          shift and go to state 23
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 16

    (6) Declarations -> Declaration . Declarations
    (6) Declarations -> . Declaration Declarations
    (7) Declarations -> . empty
    (8) Declaration -> . Type ID ;
    (5) empty -> .
    (9) Type -> . INT
    (10) Type -> . BOOL
    (11) Type -> . FLOAT
    (12) Type -> . CHAR

    ;               reduce using rule 5 (empty -> .)
    ID              reduce using rule 5 (empty -> .)
    IF              reduce using rule 5 (empty -> .)
    WHILE           reduce using rule 5 (empty -> .)
    FOR             reduce using rule 5 (empty -> .)
    {               reduce using rule 5 (empty -> .)
    RETURN          reduce using rule 5 (empty -> .)
    INT             shift and go to state 5
    BOOL            shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8

    Declaration                    shift and go to state 16
    Declarations                   shift and go to state 33
    empty                          shift and go to state 17
    Type                           shift and go to state 14

state 17

    (7) Declarations -> empty .

    ;               reduce using rule 7 (Declarations -> empty .)
    ID              reduce using rule 7 (Declarations -> empty .)
    IF              reduce using rule 7 (Declarations -> empty .)
    WHILE           reduce using rule 7 (Declarations -> empty .)
    FOR             reduce using rule 7 (Declarations -> empty .)
    {               reduce using rule 7 (Declarations -> empty .)
    RETURN          reduce using rule 7 (Declarations -> empty .)


state 18

    (8) Declaration -> Type ID . ;

    ;               shift and go to state 34


state 19

    (25) Assignment -> ID . = Expression ;

    =               shift and go to state 35


state 20

    (21) Block -> { . Statements }
    (13) Statements -> . Statement Statements
    (14) Statements -> . empty
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (5) empty -> .
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    }               reduce using rule 5 (empty -> .)
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statements                     shift and go to state 36
    Statement                      shift and go to state 22
    empty                          shift and go to state 23
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 21

    (3) Function -> Type ID ( ) { Declarations Statements . ReturnStatement }
    (4) ReturnStatement -> . RETURN Expression ;

    RETURN          shift and go to state 38

    ReturnStatement                shift and go to state 37

state 22

    (13) Statements -> Statement . Statements
    (13) Statements -> . Statement Statements
    (14) Statements -> . empty
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (5) empty -> .
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    RETURN          reduce using rule 5 (empty -> .)
    }               reduce using rule 5 (empty -> .)
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statement                      shift and go to state 22
    Statements                     shift and go to state 39
    empty                          shift and go to state 23
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 23

    (14) Statements -> empty .

    RETURN          reduce using rule 14 (Statements -> empty .)
    }               reduce using rule 14 (Statements -> empty .)


state 24

    (15) Statement -> Assignment .

    ;               reduce using rule 15 (Statement -> Assignment .)
    ID              reduce using rule 15 (Statement -> Assignment .)
    IF              reduce using rule 15 (Statement -> Assignment .)
    WHILE           reduce using rule 15 (Statement -> Assignment .)
    FOR             reduce using rule 15 (Statement -> Assignment .)
    {               reduce using rule 15 (Statement -> Assignment .)
    RETURN          reduce using rule 15 (Statement -> Assignment .)
    }               reduce using rule 15 (Statement -> Assignment .)
    ELSE            reduce using rule 15 (Statement -> Assignment .)


state 25

    (16) Statement -> IfStatement .

    ;               reduce using rule 16 (Statement -> IfStatement .)
    ID              reduce using rule 16 (Statement -> IfStatement .)
    IF              reduce using rule 16 (Statement -> IfStatement .)
    WHILE           reduce using rule 16 (Statement -> IfStatement .)
    FOR             reduce using rule 16 (Statement -> IfStatement .)
    {               reduce using rule 16 (Statement -> IfStatement .)
    RETURN          reduce using rule 16 (Statement -> IfStatement .)
    }               reduce using rule 16 (Statement -> IfStatement .)
    ELSE            reduce using rule 16 (Statement -> IfStatement .)


state 26

    (17) Statement -> WhileStatement .

    ;               reduce using rule 17 (Statement -> WhileStatement .)
    ID              reduce using rule 17 (Statement -> WhileStatement .)
    IF              reduce using rule 17 (Statement -> WhileStatement .)
    WHILE           reduce using rule 17 (Statement -> WhileStatement .)
    FOR             reduce using rule 17 (Statement -> WhileStatement .)
    {               reduce using rule 17 (Statement -> WhileStatement .)
    RETURN          reduce using rule 17 (Statement -> WhileStatement .)
    }               reduce using rule 17 (Statement -> WhileStatement .)
    ELSE            reduce using rule 17 (Statement -> WhileStatement .)


state 27

    (18) Statement -> ForStatement .

    ;               reduce using rule 18 (Statement -> ForStatement .)
    ID              reduce using rule 18 (Statement -> ForStatement .)
    IF              reduce using rule 18 (Statement -> ForStatement .)
    WHILE           reduce using rule 18 (Statement -> ForStatement .)
    FOR             reduce using rule 18 (Statement -> ForStatement .)
    {               reduce using rule 18 (Statement -> ForStatement .)
    RETURN          reduce using rule 18 (Statement -> ForStatement .)
    }               reduce using rule 18 (Statement -> ForStatement .)
    ELSE            reduce using rule 18 (Statement -> ForStatement .)


state 28

    (19) Statement -> ; .

    ;               reduce using rule 19 (Statement -> ; .)
    ID              reduce using rule 19 (Statement -> ; .)
    IF              reduce using rule 19 (Statement -> ; .)
    WHILE           reduce using rule 19 (Statement -> ; .)
    FOR             reduce using rule 19 (Statement -> ; .)
    {               reduce using rule 19 (Statement -> ; .)
    RETURN          reduce using rule 19 (Statement -> ; .)
    }               reduce using rule 19 (Statement -> ; .)
    ELSE            reduce using rule 19 (Statement -> ; .)


state 29

    (20) Statement -> Block .

    ;               reduce using rule 20 (Statement -> Block .)
    ID              reduce using rule 20 (Statement -> Block .)
    IF              reduce using rule 20 (Statement -> Block .)
    WHILE           reduce using rule 20 (Statement -> Block .)
    FOR             reduce using rule 20 (Statement -> Block .)
    {               reduce using rule 20 (Statement -> Block .)
    RETURN          reduce using rule 20 (Statement -> Block .)
    }               reduce using rule 20 (Statement -> Block .)
    ELSE            reduce using rule 20 (Statement -> Block .)


state 30

    (22) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 40


state 31

    (23) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 41


state 32

    (24) ForStatement -> FOR . ( Assignment Expression ; Assignment ) Statement

    (               shift and go to state 42


state 33

    (6) Declarations -> Declaration Declarations .

    ;               reduce using rule 6 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 6 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 6 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 6 (Declarations -> Declaration Declarations .)
    FOR             reduce using rule 6 (Declarations -> Declaration Declarations .)
    {               reduce using rule 6 (Declarations -> Declaration Declarations .)
    RETURN          reduce using rule 6 (Declarations -> Declaration Declarations .)


state 34

    (8) Declaration -> Type ID ; .

    INT             reduce using rule 8 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 8 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 8 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 8 (Declaration -> Type ID ; .)
    ;               reduce using rule 8 (Declaration -> Type ID ; .)
    ID              reduce using rule 8 (Declaration -> Type ID ; .)
    IF              reduce using rule 8 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 8 (Declaration -> Type ID ; .)
    FOR             reduce using rule 8 (Declaration -> Type ID ; .)
    {               reduce using rule 8 (Declaration -> Type ID ; .)
    RETURN          reduce using rule 8 (Declaration -> Type ID ; .)


state 35

    (25) Assignment -> ID = . Expression ;
    (26) Expression -> . Conjunction
    (27) Expression -> . Expression OR Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Expression                     shift and go to state 44
    Conjunction                    shift and go to state 45
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 36

    (21) Block -> { Statements . }

    }               shift and go to state 56


state 37

    (3) Function -> Type ID ( ) { Declarations Statements ReturnStatement . }

    }               shift and go to state 57


state 38

    (4) ReturnStatement -> RETURN . Expression ;
    (26) Expression -> . Conjunction
    (27) Expression -> . Expression OR Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Expression                     shift and go to state 58
    Conjunction                    shift and go to state 45
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 39

    (13) Statements -> Statement Statements .

    RETURN          reduce using rule 13 (Statements -> Statement Statements .)
    }               reduce using rule 13 (Statements -> Statement Statements .)


state 40

    (22) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (26) Expression -> . Conjunction
    (27) Expression -> . Expression OR Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Expression                     shift and go to state 59
    Conjunction                    shift and go to state 45
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 41

    (23) WhileStatement -> WHILE ( . Expression ) Statement
    (26) Expression -> . Conjunction
    (27) Expression -> . Expression OR Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Expression                     shift and go to state 60
    Conjunction                    shift and go to state 45
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 42

    (24) ForStatement -> FOR ( . Assignment Expression ; Assignment ) Statement
    (25) Assignment -> . ID = Expression ;

    ID              shift and go to state 19

    Assignment                     shift and go to state 61

state 43

    (54) Primary -> ID .

    *               reduce using rule 54 (Primary -> ID .)
    /               reduce using rule 54 (Primary -> ID .)
    %               reduce using rule 54 (Primary -> ID .)
    <               reduce using rule 54 (Primary -> ID .)
    LTE             reduce using rule 54 (Primary -> ID .)
    >               reduce using rule 54 (Primary -> ID .)
    GTE             reduce using rule 54 (Primary -> ID .)
    +               reduce using rule 54 (Primary -> ID .)
    -               reduce using rule 54 (Primary -> ID .)
    EQ              reduce using rule 54 (Primary -> ID .)
    NEQ             reduce using rule 54 (Primary -> ID .)
    AND             reduce using rule 54 (Primary -> ID .)
    ;               reduce using rule 54 (Primary -> ID .)
    OR              reduce using rule 54 (Primary -> ID .)
    )               reduce using rule 54 (Primary -> ID .)


state 44

    (25) Assignment -> ID = Expression . ;
    (27) Expression -> Expression . OR Conjunction

    ;               shift and go to state 62
    OR              shift and go to state 63


state 45

    (26) Expression -> Conjunction .
    (29) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 26 (Expression -> Conjunction .)
    OR              reduce using rule 26 (Expression -> Conjunction .)
    )               reduce using rule 26 (Expression -> Conjunction .)
    AND             shift and go to state 64


state 46

    (28) Conjunction -> Equality .

    AND             reduce using rule 28 (Conjunction -> Equality .)
    ;               reduce using rule 28 (Conjunction -> Equality .)
    OR              reduce using rule 28 (Conjunction -> Equality .)
    )               reduce using rule 28 (Conjunction -> Equality .)


state 47

    (30) Equality -> Relation .
    (31) Equality -> Relation . EquOp Relation
    (32) EquOp -> . EQ
    (33) EquOp -> . NEQ

    AND             reduce using rule 30 (Equality -> Relation .)
    ;               reduce using rule 30 (Equality -> Relation .)
    OR              reduce using rule 30 (Equality -> Relation .)
    )               reduce using rule 30 (Equality -> Relation .)
    EQ              shift and go to state 66
    NEQ             shift and go to state 67

    EquOp                          shift and go to state 65

state 48

    (34) Relation -> Addition .
    (35) Relation -> Addition . RelOp Addition
    (41) Addition -> Addition . AddOp Term
    (36) RelOp -> . <
    (37) RelOp -> . LTE
    (38) RelOp -> . >
    (39) RelOp -> . GTE
    (42) AddOp -> . +
    (43) AddOp -> . -

    EQ              reduce using rule 34 (Relation -> Addition .)
    NEQ             reduce using rule 34 (Relation -> Addition .)
    AND             reduce using rule 34 (Relation -> Addition .)
    ;               reduce using rule 34 (Relation -> Addition .)
    OR              reduce using rule 34 (Relation -> Addition .)
    )               reduce using rule 34 (Relation -> Addition .)
    <               shift and go to state 70
    LTE             shift and go to state 71
    >               shift and go to state 72
    GTE             shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75

    RelOp                          shift and go to state 68
    AddOp                          shift and go to state 69

state 49

    (40) Addition -> Term .
    (45) Term -> Term . MulOp Primary
    (46) MulOp -> . *
    (47) MulOp -> . /
    (48) MulOp -> . %

    <               reduce using rule 40 (Addition -> Term .)
    LTE             reduce using rule 40 (Addition -> Term .)
    >               reduce using rule 40 (Addition -> Term .)
    GTE             reduce using rule 40 (Addition -> Term .)
    +               reduce using rule 40 (Addition -> Term .)
    -               reduce using rule 40 (Addition -> Term .)
    EQ              reduce using rule 40 (Addition -> Term .)
    NEQ             reduce using rule 40 (Addition -> Term .)
    AND             reduce using rule 40 (Addition -> Term .)
    ;               reduce using rule 40 (Addition -> Term .)
    OR              reduce using rule 40 (Addition -> Term .)
    )               reduce using rule 40 (Addition -> Term .)
    *               shift and go to state 77
    /               shift and go to state 78
    %               shift and go to state 79

    MulOp                          shift and go to state 76

state 50

    (44) Term -> Factor .

    *               reduce using rule 44 (Term -> Factor .)
    /               reduce using rule 44 (Term -> Factor .)
    %               reduce using rule 44 (Term -> Factor .)
    <               reduce using rule 44 (Term -> Factor .)
    LTE             reduce using rule 44 (Term -> Factor .)
    >               reduce using rule 44 (Term -> Factor .)
    GTE             reduce using rule 44 (Term -> Factor .)
    +               reduce using rule 44 (Term -> Factor .)
    -               reduce using rule 44 (Term -> Factor .)
    EQ              reduce using rule 44 (Term -> Factor .)
    NEQ             reduce using rule 44 (Term -> Factor .)
    AND             reduce using rule 44 (Term -> Factor .)
    ;               reduce using rule 44 (Term -> Factor .)
    OR              reduce using rule 44 (Term -> Factor .)
    )               reduce using rule 44 (Term -> Factor .)


state 51

    (49) Factor -> Primary .

    *               reduce using rule 49 (Factor -> Primary .)
    /               reduce using rule 49 (Factor -> Primary .)
    %               reduce using rule 49 (Factor -> Primary .)
    <               reduce using rule 49 (Factor -> Primary .)
    LTE             reduce using rule 49 (Factor -> Primary .)
    >               reduce using rule 49 (Factor -> Primary .)
    GTE             reduce using rule 49 (Factor -> Primary .)
    +               reduce using rule 49 (Factor -> Primary .)
    -               reduce using rule 49 (Factor -> Primary .)
    EQ              reduce using rule 49 (Factor -> Primary .)
    NEQ             reduce using rule 49 (Factor -> Primary .)
    AND             reduce using rule 49 (Factor -> Primary .)
    ;               reduce using rule 49 (Factor -> Primary .)
    OR              reduce using rule 49 (Factor -> Primary .)
    )               reduce using rule 49 (Factor -> Primary .)


state 52

    (50) Factor -> UnaryOp . Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID

    INTLIT          shift and go to state 53
    ID              shift and go to state 43

    Primary                        shift and go to state 80

state 53

    (53) Primary -> INTLIT .

    *               reduce using rule 53 (Primary -> INTLIT .)
    /               reduce using rule 53 (Primary -> INTLIT .)
    %               reduce using rule 53 (Primary -> INTLIT .)
    <               reduce using rule 53 (Primary -> INTLIT .)
    LTE             reduce using rule 53 (Primary -> INTLIT .)
    >               reduce using rule 53 (Primary -> INTLIT .)
    GTE             reduce using rule 53 (Primary -> INTLIT .)
    +               reduce using rule 53 (Primary -> INTLIT .)
    -               reduce using rule 53 (Primary -> INTLIT .)
    EQ              reduce using rule 53 (Primary -> INTLIT .)
    NEQ             reduce using rule 53 (Primary -> INTLIT .)
    AND             reduce using rule 53 (Primary -> INTLIT .)
    ;               reduce using rule 53 (Primary -> INTLIT .)
    OR              reduce using rule 53 (Primary -> INTLIT .)
    )               reduce using rule 53 (Primary -> INTLIT .)


state 54

    (51) UnaryOp -> - .

    INTLIT          reduce using rule 51 (UnaryOp -> - .)
    ID              reduce using rule 51 (UnaryOp -> - .)


state 55

    (52) UnaryOp -> ! .

    INTLIT          reduce using rule 52 (UnaryOp -> ! .)
    ID              reduce using rule 52 (UnaryOp -> ! .)


state 56

    (21) Block -> { Statements } .

    ;               reduce using rule 21 (Block -> { Statements } .)
    ID              reduce using rule 21 (Block -> { Statements } .)
    IF              reduce using rule 21 (Block -> { Statements } .)
    WHILE           reduce using rule 21 (Block -> { Statements } .)
    FOR             reduce using rule 21 (Block -> { Statements } .)
    {               reduce using rule 21 (Block -> { Statements } .)
    RETURN          reduce using rule 21 (Block -> { Statements } .)
    }               reduce using rule 21 (Block -> { Statements } .)
    ELSE            reduce using rule 21 (Block -> { Statements } .)


state 57

    (3) Function -> Type ID ( ) { Declarations Statements ReturnStatement } .

    INT             reduce using rule 3 (Function -> Type ID ( ) { Declarations Statements ReturnStatement } .)
    BOOL            reduce using rule 3 (Function -> Type ID ( ) { Declarations Statements ReturnStatement } .)
    FLOAT           reduce using rule 3 (Function -> Type ID ( ) { Declarations Statements ReturnStatement } .)
    CHAR            reduce using rule 3 (Function -> Type ID ( ) { Declarations Statements ReturnStatement } .)
    $end            reduce using rule 3 (Function -> Type ID ( ) { Declarations Statements ReturnStatement } .)


state 58

    (4) ReturnStatement -> RETURN Expression . ;
    (27) Expression -> Expression . OR Conjunction

    ;               shift and go to state 81
    OR              shift and go to state 63


state 59

    (22) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (27) Expression -> Expression . OR Conjunction

    )               shift and go to state 82
    OR              shift and go to state 63


state 60

    (23) WhileStatement -> WHILE ( Expression . ) Statement
    (27) Expression -> Expression . OR Conjunction

    )               shift and go to state 83
    OR              shift and go to state 63


state 61

    (24) ForStatement -> FOR ( Assignment . Expression ; Assignment ) Statement
    (26) Expression -> . Conjunction
    (27) Expression -> . Expression OR Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Expression                     shift and go to state 84
    Conjunction                    shift and go to state 45
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 62

    (25) Assignment -> ID = Expression ; .

    ;               reduce using rule 25 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 25 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 25 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 25 (Assignment -> ID = Expression ; .)
    FOR             reduce using rule 25 (Assignment -> ID = Expression ; .)
    {               reduce using rule 25 (Assignment -> ID = Expression ; .)
    RETURN          reduce using rule 25 (Assignment -> ID = Expression ; .)
    }               reduce using rule 25 (Assignment -> ID = Expression ; .)
    INTLIT          reduce using rule 25 (Assignment -> ID = Expression ; .)
    -               reduce using rule 25 (Assignment -> ID = Expression ; .)
    !               reduce using rule 25 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 25 (Assignment -> ID = Expression ; .)
    )               reduce using rule 25 (Assignment -> ID = Expression ; .)


state 63

    (27) Expression -> Expression OR . Conjunction
    (28) Conjunction -> . Equality
    (29) Conjunction -> . Conjunction AND Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Conjunction                    shift and go to state 85
    Equality                       shift and go to state 46
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 64

    (29) Conjunction -> Conjunction AND . Equality
    (30) Equality -> . Relation
    (31) Equality -> . Relation EquOp Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Equality                       shift and go to state 86
    Relation                       shift and go to state 47
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 65

    (31) Equality -> Relation EquOp . Relation
    (34) Relation -> . Addition
    (35) Relation -> . Addition RelOp Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Relation                       shift and go to state 87
    Addition                       shift and go to state 48
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 66

    (32) EquOp -> EQ .

    INTLIT          reduce using rule 32 (EquOp -> EQ .)
    ID              reduce using rule 32 (EquOp -> EQ .)
    -               reduce using rule 32 (EquOp -> EQ .)
    !               reduce using rule 32 (EquOp -> EQ .)


state 67

    (33) EquOp -> NEQ .

    INTLIT          reduce using rule 33 (EquOp -> NEQ .)
    ID              reduce using rule 33 (EquOp -> NEQ .)
    -               reduce using rule 33 (EquOp -> NEQ .)
    !               reduce using rule 33 (EquOp -> NEQ .)


state 68

    (35) Relation -> Addition RelOp . Addition
    (40) Addition -> . Term
    (41) Addition -> . Addition AddOp Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Addition                       shift and go to state 88
    Term                           shift and go to state 49
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 69

    (41) Addition -> Addition AddOp . Term
    (44) Term -> . Factor
    (45) Term -> . Term MulOp Primary
    (49) Factor -> . Primary
    (50) Factor -> . UnaryOp Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID
    (51) UnaryOp -> . -
    (52) UnaryOp -> . !

    INTLIT          shift and go to state 53
    ID              shift and go to state 43
    -               shift and go to state 54
    !               shift and go to state 55

    Term                           shift and go to state 89
    Factor                         shift and go to state 50
    Primary                        shift and go to state 51
    UnaryOp                        shift and go to state 52

state 70

    (36) RelOp -> < .

    INTLIT          reduce using rule 36 (RelOp -> < .)
    ID              reduce using rule 36 (RelOp -> < .)
    -               reduce using rule 36 (RelOp -> < .)
    !               reduce using rule 36 (RelOp -> < .)


state 71

    (37) RelOp -> LTE .

    INTLIT          reduce using rule 37 (RelOp -> LTE .)
    ID              reduce using rule 37 (RelOp -> LTE .)
    -               reduce using rule 37 (RelOp -> LTE .)
    !               reduce using rule 37 (RelOp -> LTE .)


state 72

    (38) RelOp -> > .

    INTLIT          reduce using rule 38 (RelOp -> > .)
    ID              reduce using rule 38 (RelOp -> > .)
    -               reduce using rule 38 (RelOp -> > .)
    !               reduce using rule 38 (RelOp -> > .)


state 73

    (39) RelOp -> GTE .

    INTLIT          reduce using rule 39 (RelOp -> GTE .)
    ID              reduce using rule 39 (RelOp -> GTE .)
    -               reduce using rule 39 (RelOp -> GTE .)
    !               reduce using rule 39 (RelOp -> GTE .)


state 74

    (42) AddOp -> + .

    INTLIT          reduce using rule 42 (AddOp -> + .)
    ID              reduce using rule 42 (AddOp -> + .)
    -               reduce using rule 42 (AddOp -> + .)
    !               reduce using rule 42 (AddOp -> + .)


state 75

    (43) AddOp -> - .

    INTLIT          reduce using rule 43 (AddOp -> - .)
    ID              reduce using rule 43 (AddOp -> - .)
    -               reduce using rule 43 (AddOp -> - .)
    !               reduce using rule 43 (AddOp -> - .)


state 76

    (45) Term -> Term MulOp . Primary
    (53) Primary -> . INTLIT
    (54) Primary -> . ID

    INTLIT          shift and go to state 53
    ID              shift and go to state 43

    Primary                        shift and go to state 90

state 77

    (46) MulOp -> * .

    INTLIT          reduce using rule 46 (MulOp -> * .)
    ID              reduce using rule 46 (MulOp -> * .)


state 78

    (47) MulOp -> / .

    INTLIT          reduce using rule 47 (MulOp -> / .)
    ID              reduce using rule 47 (MulOp -> / .)


state 79

    (48) MulOp -> % .

    INTLIT          reduce using rule 48 (MulOp -> % .)
    ID              reduce using rule 48 (MulOp -> % .)


state 80

    (50) Factor -> UnaryOp Primary .

    *               reduce using rule 50 (Factor -> UnaryOp Primary .)
    /               reduce using rule 50 (Factor -> UnaryOp Primary .)
    %               reduce using rule 50 (Factor -> UnaryOp Primary .)
    <               reduce using rule 50 (Factor -> UnaryOp Primary .)
    LTE             reduce using rule 50 (Factor -> UnaryOp Primary .)
    >               reduce using rule 50 (Factor -> UnaryOp Primary .)
    GTE             reduce using rule 50 (Factor -> UnaryOp Primary .)
    +               reduce using rule 50 (Factor -> UnaryOp Primary .)
    -               reduce using rule 50 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 50 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 50 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 50 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 50 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 50 (Factor -> UnaryOp Primary .)
    )               reduce using rule 50 (Factor -> UnaryOp Primary .)


state 81

    (4) ReturnStatement -> RETURN Expression ; .

    }               reduce using rule 4 (ReturnStatement -> RETURN Expression ; .)


state 82

    (22) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statement                      shift and go to state 91
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 83

    (23) WhileStatement -> WHILE ( Expression ) . Statement
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statement                      shift and go to state 92
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 84

    (24) ForStatement -> FOR ( Assignment Expression . ; Assignment ) Statement
    (27) Expression -> Expression . OR Conjunction

    ;               shift and go to state 93
    OR              shift and go to state 63


state 85

    (27) Expression -> Expression OR Conjunction .
    (29) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 27 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 27 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 27 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 64


state 86

    (29) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 29 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 29 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 29 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 29 (Conjunction -> Conjunction AND Equality .)


state 87

    (31) Equality -> Relation EquOp Relation .

    AND             reduce using rule 31 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 31 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 31 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 31 (Equality -> Relation EquOp Relation .)


state 88

    (35) Relation -> Addition RelOp Addition .
    (41) Addition -> Addition . AddOp Term
    (42) AddOp -> . +
    (43) AddOp -> . -

    EQ              reduce using rule 35 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 35 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 35 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 35 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 35 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 35 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 74
    -               shift and go to state 75

    AddOp                          shift and go to state 69

state 89

    (41) Addition -> Addition AddOp Term .
    (45) Term -> Term . MulOp Primary
    (46) MulOp -> . *
    (47) MulOp -> . /
    (48) MulOp -> . %

    <               reduce using rule 41 (Addition -> Addition AddOp Term .)
    LTE             reduce using rule 41 (Addition -> Addition AddOp Term .)
    >               reduce using rule 41 (Addition -> Addition AddOp Term .)
    GTE             reduce using rule 41 (Addition -> Addition AddOp Term .)
    +               reduce using rule 41 (Addition -> Addition AddOp Term .)
    -               reduce using rule 41 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 41 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 41 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 41 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 41 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 41 (Addition -> Addition AddOp Term .)
    )               reduce using rule 41 (Addition -> Addition AddOp Term .)
    *               shift and go to state 77
    /               shift and go to state 78
    %               shift and go to state 79

    MulOp                          shift and go to state 76

state 90

    (45) Term -> Term MulOp Primary .

    *               reduce using rule 45 (Term -> Term MulOp Primary .)
    /               reduce using rule 45 (Term -> Term MulOp Primary .)
    %               reduce using rule 45 (Term -> Term MulOp Primary .)
    <               reduce using rule 45 (Term -> Term MulOp Primary .)
    LTE             reduce using rule 45 (Term -> Term MulOp Primary .)
    >               reduce using rule 45 (Term -> Term MulOp Primary .)
    GTE             reduce using rule 45 (Term -> Term MulOp Primary .)
    +               reduce using rule 45 (Term -> Term MulOp Primary .)
    -               reduce using rule 45 (Term -> Term MulOp Primary .)
    EQ              reduce using rule 45 (Term -> Term MulOp Primary .)
    NEQ             reduce using rule 45 (Term -> Term MulOp Primary .)
    AND             reduce using rule 45 (Term -> Term MulOp Primary .)
    ;               reduce using rule 45 (Term -> Term MulOp Primary .)
    OR              reduce using rule 45 (Term -> Term MulOp Primary .)
    )               reduce using rule 45 (Term -> Term MulOp Primary .)


state 91

    (22) IfStatement -> IF ( Expression ) Statement . ELSE Statement

    ELSE            shift and go to state 94


state 92

    (23) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 23 (WhileStatement -> WHILE ( Expression ) Statement .)


state 93

    (24) ForStatement -> FOR ( Assignment Expression ; . Assignment ) Statement
    (25) Assignment -> . ID = Expression ;

    ID              shift and go to state 19

    Assignment                     shift and go to state 95

state 94

    (22) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Statement                      shift and go to state 96
    Assignment                     shift and go to state 24
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 95

    (24) ForStatement -> FOR ( Assignment Expression ; Assignment . ) Statement

    )               shift and go to state 97


state 96

    (22) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    FOR             reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 22 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)


state 97

    (24) ForStatement -> FOR ( Assignment Expression ; Assignment ) . Statement
    (15) Statement -> . Assignment
    (16) Statement -> . IfStatement
    (17) Statement -> . WhileStatement
    (18) Statement -> . ForStatement
    (19) Statement -> . ;
    (20) Statement -> . Block
    (25) Assignment -> . ID = Expression ;
    (22) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (23) WhileStatement -> . WHILE ( Expression ) Statement
    (24) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (21) Block -> . { Statements }

    ;               shift and go to state 28
    ID              shift and go to state 19
    IF              shift and go to state 30
    WHILE           shift and go to state 31
    FOR             shift and go to state 32
    {               shift and go to state 20

    Assignment                     shift and go to state 24
    Statement                      shift and go to state 98
    IfStatement                    shift and go to state 25
    WhileStatement                 shift and go to state 26
    ForStatement                   shift and go to state 27
    Block                          shift and go to state 29

state 98

    (24) ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .

    ;               reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    ID              reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    IF              reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    WHILE           reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    FOR             reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    {               reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    RETURN          reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    }               reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    ELSE            reduce using rule 24 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)

