Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    EQ
    FLOAT
    GTE
    LTE
    NEQ
    OR
    RETURN
    WHILE

Grammar

Rule 0     S' -> Program
Rule 1     Program -> INT MAIN ( ) { Declarations Statements }
Rule 2     empty -> <empty>
Rule 3     Declarations -> Declaration Declarations
Rule 4     Declarations -> empty
Rule 5     Declaration -> INT ID ;
Rule 6     Statements -> Statement Statements
Rule 7     Statements -> empty
Rule 8     Statement -> Assignment
Rule 9     Statement -> IfStatement
Rule 10    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 11    Assignment -> ID = Expression ;
Rule 12    Expression -> Conjunction
Rule 13    Conjunction -> Equality
Rule 14    Equality -> Relation
Rule 15    Relation -> Addition
Rule 16    Relation -> Relation < Addition
Rule 17    Addition -> Factor
Rule 18    Factor -> Primary
Rule 19    Factor -> Factor * Primary
Rule 20    UnaryOp -> -
Rule 21    UnaryOp -> !
Rule 22    Primary -> INTLIT
Rule 23    Primary -> ID

Terminals, with rules where they appear

!                    : 21
(                    : 1 10
)                    : 1 10
*                    : 19
-                    : 20
;                    : 5 11
<                    : 16
=                    : 11
AND                  : 
ELSE                 : 10
EQ                   : 
FLOAT                : 
GTE                  : 
ID                   : 5 11 23
IF                   : 10
INT                  : 1 5
INTLIT               : 22
LTE                  : 
MAIN                 : 1
NEQ                  : 
OR                   : 
RETURN               : 
WHILE                : 
error                : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

Addition             : 15 16
Assignment           : 8
Conjunction          : 12
Declaration          : 3
Declarations         : 1 3
Equality             : 13
Expression           : 10 11
Factor               : 17 19
IfStatement          : 9
Primary              : 18 19
Program              : 0
Relation             : 14 16
Statement            : 6 10 10
Statements           : 1 6
UnaryOp              : 
empty                : 4 7

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . INT MAIN ( ) { Declarations Statements }

    INT             shift and go to state 2

    Program                        shift and go to state 1

state 1

    (0) S' -> Program .



state 2

    (1) Program -> INT . MAIN ( ) { Declarations Statements }

    MAIN            shift and go to state 3


state 3

    (1) Program -> INT MAIN . ( ) { Declarations Statements }

    (               shift and go to state 4


state 4

    (1) Program -> INT MAIN ( . ) { Declarations Statements }

    )               shift and go to state 5


state 5

    (1) Program -> INT MAIN ( ) . { Declarations Statements }

    {               shift and go to state 6


state 6

    (1) Program -> INT MAIN ( ) { . Declarations Statements }
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . INT ID ;
    (2) empty -> .

    INT             shift and go to state 7
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    Declarations                   shift and go to state 8
    Declaration                    shift and go to state 9
    empty                          shift and go to state 10

state 7

    (5) Declaration -> INT . ID ;

    ID              shift and go to state 11


state 8

    (1) Program -> INT MAIN ( ) { Declarations . Statements }
    (6) Statements -> . Statement Statements
    (7) Statements -> . empty
    (8) Statement -> . Assignment
    (9) Statement -> . IfStatement
    (2) empty -> .
    (11) Assignment -> . ID = Expression ;
    (10) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 17
    IF              shift and go to state 18

    Statements                     shift and go to state 12
    Statement                      shift and go to state 13
    empty                          shift and go to state 14
    Assignment                     shift and go to state 15
    IfStatement                    shift and go to state 16

state 9

    (3) Declarations -> Declaration . Declarations
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . INT ID ;
    (2) empty -> .

    INT             shift and go to state 7
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)

    Declaration                    shift and go to state 9
    Declarations                   shift and go to state 19
    empty                          shift and go to state 10

state 10

    (4) Declarations -> empty .

    ID              reduce using rule 4 (Declarations -> empty .)
    IF              reduce using rule 4 (Declarations -> empty .)
    }               reduce using rule 4 (Declarations -> empty .)


state 11

    (5) Declaration -> INT ID . ;

    ;               shift and go to state 20


state 12

    (1) Program -> INT MAIN ( ) { Declarations Statements . }

    }               shift and go to state 21


state 13

    (6) Statements -> Statement . Statements
    (6) Statements -> . Statement Statements
    (7) Statements -> . empty
    (8) Statement -> . Assignment
    (9) Statement -> . IfStatement
    (2) empty -> .
    (11) Assignment -> . ID = Expression ;
    (10) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 17
    IF              shift and go to state 18

    Statement                      shift and go to state 13
    Statements                     shift and go to state 22
    empty                          shift and go to state 14
    Assignment                     shift and go to state 15
    IfStatement                    shift and go to state 16

state 14

    (7) Statements -> empty .

    }               reduce using rule 7 (Statements -> empty .)


state 15

    (8) Statement -> Assignment .

    ID              reduce using rule 8 (Statement -> Assignment .)
    IF              reduce using rule 8 (Statement -> Assignment .)
    }               reduce using rule 8 (Statement -> Assignment .)
    ELSE            reduce using rule 8 (Statement -> Assignment .)


state 16

    (9) Statement -> IfStatement .

    ID              reduce using rule 9 (Statement -> IfStatement .)
    IF              reduce using rule 9 (Statement -> IfStatement .)
    }               reduce using rule 9 (Statement -> IfStatement .)
    ELSE            reduce using rule 9 (Statement -> IfStatement .)


state 17

    (11) Assignment -> ID . = Expression ;

    =               shift and go to state 23


state 18

    (10) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 24


state 19

    (3) Declarations -> Declaration Declarations .

    ID              reduce using rule 3 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 3 (Declarations -> Declaration Declarations .)
    }               reduce using rule 3 (Declarations -> Declaration Declarations .)


state 20

    (5) Declaration -> INT ID ; .

    INT             reduce using rule 5 (Declaration -> INT ID ; .)
    ID              reduce using rule 5 (Declaration -> INT ID ; .)
    IF              reduce using rule 5 (Declaration -> INT ID ; .)
    }               reduce using rule 5 (Declaration -> INT ID ; .)


state 21

    (1) Program -> INT MAIN ( ) { Declarations Statements } .

    $end            reduce using rule 1 (Program -> INT MAIN ( ) { Declarations Statements } .)


state 22

    (6) Statements -> Statement Statements .

    }               reduce using rule 6 (Statements -> Statement Statements .)


state 23

    (11) Assignment -> ID = . Expression ;
    (12) Expression -> . Conjunction
    (13) Conjunction -> . Equality
    (14) Equality -> . Relation
    (15) Relation -> . Addition
    (16) Relation -> . Relation < Addition
    (17) Addition -> . Factor
    (18) Factor -> . Primary
    (19) Factor -> . Factor * Primary
    (22) Primary -> . INTLIT
    (23) Primary -> . ID

    INTLIT          shift and go to state 33
    ID              shift and go to state 25

    Expression                     shift and go to state 26
    Conjunction                    shift and go to state 27
    Equality                       shift and go to state 28
    Relation                       shift and go to state 29
    Addition                       shift and go to state 30
    Factor                         shift and go to state 31
    Primary                        shift and go to state 32

state 24

    (10) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (12) Expression -> . Conjunction
    (13) Conjunction -> . Equality
    (14) Equality -> . Relation
    (15) Relation -> . Addition
    (16) Relation -> . Relation < Addition
    (17) Addition -> . Factor
    (18) Factor -> . Primary
    (19) Factor -> . Factor * Primary
    (22) Primary -> . INTLIT
    (23) Primary -> . ID

    INTLIT          shift and go to state 33
    ID              shift and go to state 25

    Expression                     shift and go to state 34
    Conjunction                    shift and go to state 27
    Equality                       shift and go to state 28
    Relation                       shift and go to state 29
    Addition                       shift and go to state 30
    Factor                         shift and go to state 31
    Primary                        shift and go to state 32

state 25

    (23) Primary -> ID .

    *               reduce using rule 23 (Primary -> ID .)
    <               reduce using rule 23 (Primary -> ID .)
    ;               reduce using rule 23 (Primary -> ID .)
    )               reduce using rule 23 (Primary -> ID .)


state 26

    (11) Assignment -> ID = Expression . ;

    ;               shift and go to state 35


state 27

    (12) Expression -> Conjunction .

    ;               reduce using rule 12 (Expression -> Conjunction .)
    )               reduce using rule 12 (Expression -> Conjunction .)


state 28

    (13) Conjunction -> Equality .

    ;               reduce using rule 13 (Conjunction -> Equality .)
    )               reduce using rule 13 (Conjunction -> Equality .)


state 29

    (14) Equality -> Relation .
    (16) Relation -> Relation . < Addition

    ;               reduce using rule 14 (Equality -> Relation .)
    )               reduce using rule 14 (Equality -> Relation .)
    <               shift and go to state 36


state 30

    (15) Relation -> Addition .

    <               reduce using rule 15 (Relation -> Addition .)
    ;               reduce using rule 15 (Relation -> Addition .)
    )               reduce using rule 15 (Relation -> Addition .)


state 31

    (17) Addition -> Factor .
    (19) Factor -> Factor . * Primary

    <               reduce using rule 17 (Addition -> Factor .)
    ;               reduce using rule 17 (Addition -> Factor .)
    )               reduce using rule 17 (Addition -> Factor .)
    *               shift and go to state 37


state 32

    (18) Factor -> Primary .

    *               reduce using rule 18 (Factor -> Primary .)
    <               reduce using rule 18 (Factor -> Primary .)
    ;               reduce using rule 18 (Factor -> Primary .)
    )               reduce using rule 18 (Factor -> Primary .)


state 33

    (22) Primary -> INTLIT .

    *               reduce using rule 22 (Primary -> INTLIT .)
    <               reduce using rule 22 (Primary -> INTLIT .)
    ;               reduce using rule 22 (Primary -> INTLIT .)
    )               reduce using rule 22 (Primary -> INTLIT .)


state 34

    (10) IfStatement -> IF ( Expression . ) Statement ELSE Statement

    )               shift and go to state 38


state 35

    (11) Assignment -> ID = Expression ; .

    ID              reduce using rule 11 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 11 (Assignment -> ID = Expression ; .)
    }               reduce using rule 11 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 11 (Assignment -> ID = Expression ; .)


state 36

    (16) Relation -> Relation < . Addition
    (17) Addition -> . Factor
    (18) Factor -> . Primary
    (19) Factor -> . Factor * Primary
    (22) Primary -> . INTLIT
    (23) Primary -> . ID

    INTLIT          shift and go to state 33
    ID              shift and go to state 25

    Addition                       shift and go to state 39
    Factor                         shift and go to state 31
    Primary                        shift and go to state 32

state 37

    (19) Factor -> Factor * . Primary
    (22) Primary -> . INTLIT
    (23) Primary -> . ID

    INTLIT          shift and go to state 33
    ID              shift and go to state 25

    Primary                        shift and go to state 40

state 38

    (10) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (8) Statement -> . Assignment
    (9) Statement -> . IfStatement
    (11) Assignment -> . ID = Expression ;
    (10) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    ID              shift and go to state 17
    IF              shift and go to state 18

    Statement                      shift and go to state 41
    Assignment                     shift and go to state 15
    IfStatement                    shift and go to state 16

state 39

    (16) Relation -> Relation < Addition .

    <               reduce using rule 16 (Relation -> Relation < Addition .)
    ;               reduce using rule 16 (Relation -> Relation < Addition .)
    )               reduce using rule 16 (Relation -> Relation < Addition .)


state 40

    (19) Factor -> Factor * Primary .

    *               reduce using rule 19 (Factor -> Factor * Primary .)
    <               reduce using rule 19 (Factor -> Factor * Primary .)
    ;               reduce using rule 19 (Factor -> Factor * Primary .)
    )               reduce using rule 19 (Factor -> Factor * Primary .)


state 41

    (10) IfStatement -> IF ( Expression ) Statement . ELSE Statement

    ELSE            shift and go to state 42


state 42

    (10) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (8) Statement -> . Assignment
    (9) Statement -> . IfStatement
    (11) Assignment -> . ID = Expression ;
    (10) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    ID              shift and go to state 17
    IF              shift and go to state 18

    Statement                      shift and go to state 43
    Assignment                     shift and go to state 15
    IfStatement                    shift and go to state 16

state 43

    (10) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ID              reduce using rule 10 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 10 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 10 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 10 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)

