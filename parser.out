Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    EQ
    FLOAT
    GTE
    LTE
    NEQ
    OR
    RETURN
    WHILE

Grammar

Rule 0     S' -> Program
Rule 1     Program -> INT MAIN ( ) { Declarations Statements }
Rule 2     empty -> <empty>
Rule 3     Declarations -> Declaration Declarations
Rule 4     Declarations -> empty
Rule 5     Declaration -> INT ID ;
Rule 6     Statements -> Statement
Rule 7     Statement -> Assignment
Rule 8     Statement -> IfStatement
Rule 9     IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 10    Assignment -> ID = Expression ;
Rule 11    Expression -> Conjunction
Rule 12    Conjunction -> Equality
Rule 13    Equality -> Relation
Rule 14    Relation -> Addition
Rule 15    Relation -> Relation < Addition
Rule 16    Addition -> Factor
Rule 17    Factor -> Primary
Rule 18    Factor -> Factor * Primary
Rule 19    Primary -> INTLIT
Rule 20    Primary -> ID

Terminals, with rules where they appear

(                    : 1 9
)                    : 1 9
*                    : 18
;                    : 5 10
<                    : 15
=                    : 10
AND                  : 
ELSE                 : 9
EQ                   : 
FLOAT                : 
GTE                  : 
ID                   : 5 10 20
IF                   : 9
INT                  : 1 5
INTLIT               : 19
LTE                  : 
MAIN                 : 1
NEQ                  : 
OR                   : 
RETURN               : 
WHILE                : 
error                : 
{                    : 1
}                    : 1

Nonterminals, with rules where they appear

Addition             : 14 15
Assignment           : 7
Conjunction          : 11
Declaration          : 3
Declarations         : 1 3
Equality             : 12
Expression           : 9 10
Factor               : 16 18
IfStatement          : 8
Primary              : 17 18
Program              : 0
Relation             : 13 15
Statement            : 6 9 9
Statements           : 1
empty                : 4

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . INT MAIN ( ) { Declarations Statements }

    INT             shift and go to state 2

    Program                        shift and go to state 1

state 1

    (0) S' -> Program .



state 2

    (1) Program -> INT . MAIN ( ) { Declarations Statements }

    MAIN            shift and go to state 3


state 3

    (1) Program -> INT MAIN . ( ) { Declarations Statements }

    (               shift and go to state 4


state 4

    (1) Program -> INT MAIN ( . ) { Declarations Statements }

    )               shift and go to state 5


state 5

    (1) Program -> INT MAIN ( ) . { Declarations Statements }

    {               shift and go to state 6


state 6

    (1) Program -> INT MAIN ( ) { . Declarations Statements }
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . INT ID ;
    (2) empty -> .

    INT             shift and go to state 7
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)

    Declarations                   shift and go to state 8
    Declaration                    shift and go to state 9
    empty                          shift and go to state 10

state 7

    (5) Declaration -> INT . ID ;

    ID              shift and go to state 11


state 8

    (1) Program -> INT MAIN ( ) { Declarations . Statements }
    (6) Statements -> . Statement
    (7) Statement -> . Assignment
    (8) Statement -> . IfStatement
    (10) Assignment -> . ID = Expression ;
    (9) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    ID              shift and go to state 16
    IF              shift and go to state 17

    Statements                     shift and go to state 12
    Statement                      shift and go to state 13
    Assignment                     shift and go to state 14
    IfStatement                    shift and go to state 15

state 9

    (3) Declarations -> Declaration . Declarations
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . INT ID ;
    (2) empty -> .

    INT             shift and go to state 7
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)

    Declaration                    shift and go to state 9
    Declarations                   shift and go to state 18
    empty                          shift and go to state 10

state 10

    (4) Declarations -> empty .

    ID              reduce using rule 4 (Declarations -> empty .)
    IF              reduce using rule 4 (Declarations -> empty .)


state 11

    (5) Declaration -> INT ID . ;

    ;               shift and go to state 19


state 12

    (1) Program -> INT MAIN ( ) { Declarations Statements . }

    }               shift and go to state 20


state 13

    (6) Statements -> Statement .

    }               reduce using rule 6 (Statements -> Statement .)


state 14

    (7) Statement -> Assignment .

    }               reduce using rule 7 (Statement -> Assignment .)
    ELSE            reduce using rule 7 (Statement -> Assignment .)


state 15

    (8) Statement -> IfStatement .

    }               reduce using rule 8 (Statement -> IfStatement .)
    ELSE            reduce using rule 8 (Statement -> IfStatement .)


state 16

    (10) Assignment -> ID . = Expression ;

    =               shift and go to state 21


state 17

    (9) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 22


state 18

    (3) Declarations -> Declaration Declarations .

    ID              reduce using rule 3 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 3 (Declarations -> Declaration Declarations .)


state 19

    (5) Declaration -> INT ID ; .

    INT             reduce using rule 5 (Declaration -> INT ID ; .)
    ID              reduce using rule 5 (Declaration -> INT ID ; .)
    IF              reduce using rule 5 (Declaration -> INT ID ; .)


state 20

    (1) Program -> INT MAIN ( ) { Declarations Statements } .

    $end            reduce using rule 1 (Program -> INT MAIN ( ) { Declarations Statements } .)


state 21

    (10) Assignment -> ID = . Expression ;
    (11) Expression -> . Conjunction
    (12) Conjunction -> . Equality
    (13) Equality -> . Relation
    (14) Relation -> . Addition
    (15) Relation -> . Relation < Addition
    (16) Addition -> . Factor
    (17) Factor -> . Primary
    (18) Factor -> . Factor * Primary
    (19) Primary -> . INTLIT
    (20) Primary -> . ID

    INTLIT          shift and go to state 31
    ID              shift and go to state 23

    Expression                     shift and go to state 24
    Conjunction                    shift and go to state 25
    Equality                       shift and go to state 26
    Relation                       shift and go to state 27
    Addition                       shift and go to state 28
    Factor                         shift and go to state 29
    Primary                        shift and go to state 30

state 22

    (9) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (11) Expression -> . Conjunction
    (12) Conjunction -> . Equality
    (13) Equality -> . Relation
    (14) Relation -> . Addition
    (15) Relation -> . Relation < Addition
    (16) Addition -> . Factor
    (17) Factor -> . Primary
    (18) Factor -> . Factor * Primary
    (19) Primary -> . INTLIT
    (20) Primary -> . ID

    INTLIT          shift and go to state 31
    ID              shift and go to state 23

    Expression                     shift and go to state 32
    Conjunction                    shift and go to state 25
    Equality                       shift and go to state 26
    Relation                       shift and go to state 27
    Addition                       shift and go to state 28
    Factor                         shift and go to state 29
    Primary                        shift and go to state 30

state 23

    (20) Primary -> ID .

    *               reduce using rule 20 (Primary -> ID .)
    <               reduce using rule 20 (Primary -> ID .)
    ;               reduce using rule 20 (Primary -> ID .)
    )               reduce using rule 20 (Primary -> ID .)


state 24

    (10) Assignment -> ID = Expression . ;

    ;               shift and go to state 33


state 25

    (11) Expression -> Conjunction .

    ;               reduce using rule 11 (Expression -> Conjunction .)
    )               reduce using rule 11 (Expression -> Conjunction .)


state 26

    (12) Conjunction -> Equality .

    ;               reduce using rule 12 (Conjunction -> Equality .)
    )               reduce using rule 12 (Conjunction -> Equality .)


state 27

    (13) Equality -> Relation .
    (15) Relation -> Relation . < Addition

    ;               reduce using rule 13 (Equality -> Relation .)
    )               reduce using rule 13 (Equality -> Relation .)
    <               shift and go to state 34


state 28

    (14) Relation -> Addition .

    <               reduce using rule 14 (Relation -> Addition .)
    ;               reduce using rule 14 (Relation -> Addition .)
    )               reduce using rule 14 (Relation -> Addition .)


state 29

    (16) Addition -> Factor .
    (18) Factor -> Factor . * Primary

    <               reduce using rule 16 (Addition -> Factor .)
    ;               reduce using rule 16 (Addition -> Factor .)
    )               reduce using rule 16 (Addition -> Factor .)
    *               shift and go to state 35


state 30

    (17) Factor -> Primary .

    *               reduce using rule 17 (Factor -> Primary .)
    <               reduce using rule 17 (Factor -> Primary .)
    ;               reduce using rule 17 (Factor -> Primary .)
    )               reduce using rule 17 (Factor -> Primary .)


state 31

    (19) Primary -> INTLIT .

    *               reduce using rule 19 (Primary -> INTLIT .)
    <               reduce using rule 19 (Primary -> INTLIT .)
    ;               reduce using rule 19 (Primary -> INTLIT .)
    )               reduce using rule 19 (Primary -> INTLIT .)


state 32

    (9) IfStatement -> IF ( Expression . ) Statement ELSE Statement

    )               shift and go to state 36


state 33

    (10) Assignment -> ID = Expression ; .

    }               reduce using rule 10 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 10 (Assignment -> ID = Expression ; .)


state 34

    (15) Relation -> Relation < . Addition
    (16) Addition -> . Factor
    (17) Factor -> . Primary
    (18) Factor -> . Factor * Primary
    (19) Primary -> . INTLIT
    (20) Primary -> . ID

    INTLIT          shift and go to state 31
    ID              shift and go to state 23

    Addition                       shift and go to state 37
    Factor                         shift and go to state 29
    Primary                        shift and go to state 30

state 35

    (18) Factor -> Factor * . Primary
    (19) Primary -> . INTLIT
    (20) Primary -> . ID

    INTLIT          shift and go to state 31
    ID              shift and go to state 23

    Primary                        shift and go to state 38

state 36

    (9) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (7) Statement -> . Assignment
    (8) Statement -> . IfStatement
    (10) Assignment -> . ID = Expression ;
    (9) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    ID              shift and go to state 16
    IF              shift and go to state 17

    Statement                      shift and go to state 39
    Assignment                     shift and go to state 14
    IfStatement                    shift and go to state 15

state 37

    (15) Relation -> Relation < Addition .

    <               reduce using rule 15 (Relation -> Relation < Addition .)
    ;               reduce using rule 15 (Relation -> Relation < Addition .)
    )               reduce using rule 15 (Relation -> Relation < Addition .)


state 38

    (18) Factor -> Factor * Primary .

    *               reduce using rule 18 (Factor -> Factor * Primary .)
    <               reduce using rule 18 (Factor -> Factor * Primary .)
    ;               reduce using rule 18 (Factor -> Factor * Primary .)
    )               reduce using rule 18 (Factor -> Factor * Primary .)


state 39

    (9) IfStatement -> IF ( Expression ) Statement . ELSE Statement

    ELSE            shift and go to state 40


state 40

    (9) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (7) Statement -> . Assignment
    (8) Statement -> . IfStatement
    (10) Assignment -> . ID = Expression ;
    (9) IfStatement -> . IF ( Expression ) Statement ELSE Statement

    ID              shift and go to state 16
    IF              shift and go to state 17

    Statement                      shift and go to state 41
    Assignment                     shift and go to state 14
    IfStatement                    shift and go to state 15

state 41

    (9) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    }               reduce using rule 9 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 9 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)

