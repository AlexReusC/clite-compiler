Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN

Grammar

Rule 0     S' -> Program
Rule 1     Program -> Function
Rule 2     Function -> INT MAIN ( ) { Declarations Statements }
Rule 3     empty -> <empty>
Rule 4     Declarations -> Declaration Declarations
Rule 5     Declarations -> empty
Rule 6     Declaration -> Type ID ;
Rule 7     Type -> INT
Rule 8     Type -> BOOL
Rule 9     Type -> FLOAT
Rule 10    Type -> CHAR
Rule 11    Statements -> Statement Statements
Rule 12    Statements -> empty
Rule 13    Statement -> Assignment
Rule 14    Statement -> IfStatement
Rule 15    Statement -> WhileStatement
Rule 16    Statement -> ForStatement
Rule 17    Statement -> ;
Rule 18    Statement -> Block
Rule 19    Block -> { Statements }
Rule 20    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 21    WhileStatement -> WHILE ( Expression ) Statement
Rule 22    ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement
Rule 23    Assignment -> ID = Expression ;
Rule 24    Expression -> Conjunction
Rule 25    Expression -> Expression OR Conjunction
Rule 26    Conjunction -> Equality
Rule 27    Conjunction -> Conjunction AND Equality
Rule 28    Equality -> Relation
Rule 29    Equality -> Relation EquOp Relation
Rule 30    EquOp -> EQ
Rule 31    EquOp -> NEQ
Rule 32    Relation -> Addition
Rule 33    Relation -> Addition RelOp Addition
Rule 34    RelOp -> <
Rule 35    RelOp -> LTE
Rule 36    RelOp -> >
Rule 37    RelOp -> GTE
Rule 38    Addition -> Term
Rule 39    Addition -> Addition AddOp Term
Rule 40    AddOp -> +
Rule 41    AddOp -> -
Rule 42    Term -> Factor
Rule 43    Term -> Term MulOp Primary
Rule 44    MulOp -> *
Rule 45    MulOp -> /
Rule 46    MulOp -> %
Rule 47    Factor -> Primary
Rule 48    Factor -> UnaryOp Primary
Rule 49    UnaryOp -> -
Rule 50    UnaryOp -> !
Rule 51    Primary -> INTLIT
Rule 52    Primary -> ID

Terminals, with rules where they appear

!                    : 50
%                    : 46
(                    : 2 20 21 22
)                    : 2 20 21 22
*                    : 44
+                    : 40
-                    : 41 49
/                    : 45
;                    : 6 17 22 23
<                    : 34
=                    : 23
>                    : 36
AND                  : 27
BOOL                 : 8
CHAR                 : 10
ELSE                 : 20
EQ                   : 30
FLOAT                : 9
FOR                  : 22
GTE                  : 37
ID                   : 6 23 52
IF                   : 20
INT                  : 2 7
INTLIT               : 51
LTE                  : 35
MAIN                 : 2
NEQ                  : 31
OR                   : 25
RETURN               : 
WHILE                : 21
error                : 
{                    : 2 19
}                    : 2 19

Nonterminals, with rules where they appear

AddOp                : 39
Addition             : 32 33 33 39
Assignment           : 13 22 22
Block                : 18
Conjunction          : 24 25 27
Declaration          : 4
Declarations         : 2 4
EquOp                : 29
Equality             : 26 27
Expression           : 20 21 22 23 25
Factor               : 42
ForStatement         : 16
Function             : 1
IfStatement          : 14
MulOp                : 43
Primary              : 43 47 48
Program              : 0
RelOp                : 33
Relation             : 28 29 29
Statement            : 11 20 20 21 22
Statements           : 2 11 19
Term                 : 38 39 43
Type                 : 6
UnaryOp              : 48
WhileStatement       : 15
empty                : 5 12

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . Function
    (2) Function -> . INT MAIN ( ) { Declarations Statements }

    INT             shift and go to state 3

    Program                        shift and go to state 1
    Function                       shift and go to state 2

state 1

    (0) S' -> Program .



state 2

    (1) Program -> Function .

    $end            reduce using rule 1 (Program -> Function .)


state 3

    (2) Function -> INT . MAIN ( ) { Declarations Statements }

    MAIN            shift and go to state 4


state 4

    (2) Function -> INT MAIN . ( ) { Declarations Statements }

    (               shift and go to state 5


state 5

    (2) Function -> INT MAIN ( . ) { Declarations Statements }

    )               shift and go to state 6


state 6

    (2) Function -> INT MAIN ( ) . { Declarations Statements }

    {               shift and go to state 7


state 7

    (2) Function -> INT MAIN ( ) { . Declarations Statements }
    (4) Declarations -> . Declaration Declarations
    (5) Declarations -> . empty
    (6) Declaration -> . Type ID ;
    (3) empty -> .
    (7) Type -> . INT
    (8) Type -> . BOOL
    (9) Type -> . FLOAT
    (10) Type -> . CHAR

    ;               reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    {               reduce using rule 3 (empty -> .)
    }               reduce using rule 3 (empty -> .)
    INT             shift and go to state 8
    BOOL            shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    Declarations                   shift and go to state 9
    Declaration                    shift and go to state 10
    empty                          shift and go to state 11
    Type                           shift and go to state 12

state 8

    (7) Type -> INT .

    ID              reduce using rule 7 (Type -> INT .)


state 9

    (2) Function -> INT MAIN ( ) { Declarations . Statements }
    (11) Statements -> . Statement Statements
    (12) Statements -> . empty
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (3) empty -> .
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    }               reduce using rule 3 (empty -> .)
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statements                     shift and go to state 17
    Statement                      shift and go to state 18
    empty                          shift and go to state 19
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 10

    (4) Declarations -> Declaration . Declarations
    (4) Declarations -> . Declaration Declarations
    (5) Declarations -> . empty
    (6) Declaration -> . Type ID ;
    (3) empty -> .
    (7) Type -> . INT
    (8) Type -> . BOOL
    (9) Type -> . FLOAT
    (10) Type -> . CHAR

    ;               reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    FOR             reduce using rule 3 (empty -> .)
    {               reduce using rule 3 (empty -> .)
    }               reduce using rule 3 (empty -> .)
    INT             shift and go to state 8
    BOOL            shift and go to state 13
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 15

    Declaration                    shift and go to state 10
    Declarations                   shift and go to state 30
    empty                          shift and go to state 11
    Type                           shift and go to state 12

state 11

    (5) Declarations -> empty .

    ;               reduce using rule 5 (Declarations -> empty .)
    ID              reduce using rule 5 (Declarations -> empty .)
    IF              reduce using rule 5 (Declarations -> empty .)
    WHILE           reduce using rule 5 (Declarations -> empty .)
    FOR             reduce using rule 5 (Declarations -> empty .)
    {               reduce using rule 5 (Declarations -> empty .)
    }               reduce using rule 5 (Declarations -> empty .)


state 12

    (6) Declaration -> Type . ID ;

    ID              shift and go to state 31


state 13

    (8) Type -> BOOL .

    ID              reduce using rule 8 (Type -> BOOL .)


state 14

    (9) Type -> FLOAT .

    ID              reduce using rule 9 (Type -> FLOAT .)


state 15

    (10) Type -> CHAR .

    ID              reduce using rule 10 (Type -> CHAR .)


state 16

    (19) Block -> { . Statements }
    (11) Statements -> . Statement Statements
    (12) Statements -> . empty
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (3) empty -> .
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    }               reduce using rule 3 (empty -> .)
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statements                     shift and go to state 32
    Statement                      shift and go to state 18
    empty                          shift and go to state 19
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 17

    (2) Function -> INT MAIN ( ) { Declarations Statements . }

    }               shift and go to state 33


state 18

    (11) Statements -> Statement . Statements
    (11) Statements -> . Statement Statements
    (12) Statements -> . empty
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (3) empty -> .
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    }               reduce using rule 3 (empty -> .)
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statement                      shift and go to state 18
    Statements                     shift and go to state 34
    empty                          shift and go to state 19
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 19

    (12) Statements -> empty .

    }               reduce using rule 12 (Statements -> empty .)


state 20

    (13) Statement -> Assignment .

    ;               reduce using rule 13 (Statement -> Assignment .)
    ID              reduce using rule 13 (Statement -> Assignment .)
    IF              reduce using rule 13 (Statement -> Assignment .)
    WHILE           reduce using rule 13 (Statement -> Assignment .)
    FOR             reduce using rule 13 (Statement -> Assignment .)
    {               reduce using rule 13 (Statement -> Assignment .)
    }               reduce using rule 13 (Statement -> Assignment .)
    ELSE            reduce using rule 13 (Statement -> Assignment .)


state 21

    (14) Statement -> IfStatement .

    ;               reduce using rule 14 (Statement -> IfStatement .)
    ID              reduce using rule 14 (Statement -> IfStatement .)
    IF              reduce using rule 14 (Statement -> IfStatement .)
    WHILE           reduce using rule 14 (Statement -> IfStatement .)
    FOR             reduce using rule 14 (Statement -> IfStatement .)
    {               reduce using rule 14 (Statement -> IfStatement .)
    }               reduce using rule 14 (Statement -> IfStatement .)
    ELSE            reduce using rule 14 (Statement -> IfStatement .)


state 22

    (15) Statement -> WhileStatement .

    ;               reduce using rule 15 (Statement -> WhileStatement .)
    ID              reduce using rule 15 (Statement -> WhileStatement .)
    IF              reduce using rule 15 (Statement -> WhileStatement .)
    WHILE           reduce using rule 15 (Statement -> WhileStatement .)
    FOR             reduce using rule 15 (Statement -> WhileStatement .)
    {               reduce using rule 15 (Statement -> WhileStatement .)
    }               reduce using rule 15 (Statement -> WhileStatement .)
    ELSE            reduce using rule 15 (Statement -> WhileStatement .)


state 23

    (16) Statement -> ForStatement .

    ;               reduce using rule 16 (Statement -> ForStatement .)
    ID              reduce using rule 16 (Statement -> ForStatement .)
    IF              reduce using rule 16 (Statement -> ForStatement .)
    WHILE           reduce using rule 16 (Statement -> ForStatement .)
    FOR             reduce using rule 16 (Statement -> ForStatement .)
    {               reduce using rule 16 (Statement -> ForStatement .)
    }               reduce using rule 16 (Statement -> ForStatement .)
    ELSE            reduce using rule 16 (Statement -> ForStatement .)


state 24

    (17) Statement -> ; .

    ;               reduce using rule 17 (Statement -> ; .)
    ID              reduce using rule 17 (Statement -> ; .)
    IF              reduce using rule 17 (Statement -> ; .)
    WHILE           reduce using rule 17 (Statement -> ; .)
    FOR             reduce using rule 17 (Statement -> ; .)
    {               reduce using rule 17 (Statement -> ; .)
    }               reduce using rule 17 (Statement -> ; .)
    ELSE            reduce using rule 17 (Statement -> ; .)


state 25

    (18) Statement -> Block .

    ;               reduce using rule 18 (Statement -> Block .)
    ID              reduce using rule 18 (Statement -> Block .)
    IF              reduce using rule 18 (Statement -> Block .)
    WHILE           reduce using rule 18 (Statement -> Block .)
    FOR             reduce using rule 18 (Statement -> Block .)
    {               reduce using rule 18 (Statement -> Block .)
    }               reduce using rule 18 (Statement -> Block .)
    ELSE            reduce using rule 18 (Statement -> Block .)


state 26

    (23) Assignment -> ID . = Expression ;

    =               shift and go to state 35


state 27

    (20) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 36


state 28

    (21) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 37


state 29

    (22) ForStatement -> FOR . ( Assignment Expression ; Assignment ) Statement

    (               shift and go to state 38


state 30

    (4) Declarations -> Declaration Declarations .

    ;               reduce using rule 4 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 4 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 4 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 4 (Declarations -> Declaration Declarations .)
    FOR             reduce using rule 4 (Declarations -> Declaration Declarations .)
    {               reduce using rule 4 (Declarations -> Declaration Declarations .)
    }               reduce using rule 4 (Declarations -> Declaration Declarations .)


state 31

    (6) Declaration -> Type ID . ;

    ;               shift and go to state 39


state 32

    (19) Block -> { Statements . }

    }               shift and go to state 40


state 33

    (2) Function -> INT MAIN ( ) { Declarations Statements } .

    $end            reduce using rule 2 (Function -> INT MAIN ( ) { Declarations Statements } .)


state 34

    (11) Statements -> Statement Statements .

    }               reduce using rule 11 (Statements -> Statement Statements .)


state 35

    (23) Assignment -> ID = . Expression ;
    (24) Expression -> . Conjunction
    (25) Expression -> . Expression OR Conjunction
    (26) Conjunction -> . Equality
    (27) Conjunction -> . Conjunction AND Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Expression                     shift and go to state 42
    Conjunction                    shift and go to state 43
    Equality                       shift and go to state 44
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 36

    (20) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (24) Expression -> . Conjunction
    (25) Expression -> . Expression OR Conjunction
    (26) Conjunction -> . Equality
    (27) Conjunction -> . Conjunction AND Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Expression                     shift and go to state 54
    Conjunction                    shift and go to state 43
    Equality                       shift and go to state 44
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 37

    (21) WhileStatement -> WHILE ( . Expression ) Statement
    (24) Expression -> . Conjunction
    (25) Expression -> . Expression OR Conjunction
    (26) Conjunction -> . Equality
    (27) Conjunction -> . Conjunction AND Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Expression                     shift and go to state 55
    Conjunction                    shift and go to state 43
    Equality                       shift and go to state 44
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 38

    (22) ForStatement -> FOR ( . Assignment Expression ; Assignment ) Statement
    (23) Assignment -> . ID = Expression ;

    ID              shift and go to state 26

    Assignment                     shift and go to state 56

state 39

    (6) Declaration -> Type ID ; .

    INT             reduce using rule 6 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 6 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 6 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 6 (Declaration -> Type ID ; .)
    ;               reduce using rule 6 (Declaration -> Type ID ; .)
    ID              reduce using rule 6 (Declaration -> Type ID ; .)
    IF              reduce using rule 6 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 6 (Declaration -> Type ID ; .)
    FOR             reduce using rule 6 (Declaration -> Type ID ; .)
    {               reduce using rule 6 (Declaration -> Type ID ; .)
    }               reduce using rule 6 (Declaration -> Type ID ; .)


state 40

    (19) Block -> { Statements } .

    ;               reduce using rule 19 (Block -> { Statements } .)
    ID              reduce using rule 19 (Block -> { Statements } .)
    IF              reduce using rule 19 (Block -> { Statements } .)
    WHILE           reduce using rule 19 (Block -> { Statements } .)
    FOR             reduce using rule 19 (Block -> { Statements } .)
    {               reduce using rule 19 (Block -> { Statements } .)
    }               reduce using rule 19 (Block -> { Statements } .)
    ELSE            reduce using rule 19 (Block -> { Statements } .)


state 41

    (52) Primary -> ID .

    *               reduce using rule 52 (Primary -> ID .)
    /               reduce using rule 52 (Primary -> ID .)
    %               reduce using rule 52 (Primary -> ID .)
    <               reduce using rule 52 (Primary -> ID .)
    LTE             reduce using rule 52 (Primary -> ID .)
    >               reduce using rule 52 (Primary -> ID .)
    GTE             reduce using rule 52 (Primary -> ID .)
    +               reduce using rule 52 (Primary -> ID .)
    -               reduce using rule 52 (Primary -> ID .)
    EQ              reduce using rule 52 (Primary -> ID .)
    NEQ             reduce using rule 52 (Primary -> ID .)
    AND             reduce using rule 52 (Primary -> ID .)
    ;               reduce using rule 52 (Primary -> ID .)
    OR              reduce using rule 52 (Primary -> ID .)
    )               reduce using rule 52 (Primary -> ID .)


state 42

    (23) Assignment -> ID = Expression . ;
    (25) Expression -> Expression . OR Conjunction

    ;               shift and go to state 57
    OR              shift and go to state 58


state 43

    (24) Expression -> Conjunction .
    (27) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 24 (Expression -> Conjunction .)
    OR              reduce using rule 24 (Expression -> Conjunction .)
    )               reduce using rule 24 (Expression -> Conjunction .)
    AND             shift and go to state 59


state 44

    (26) Conjunction -> Equality .

    AND             reduce using rule 26 (Conjunction -> Equality .)
    ;               reduce using rule 26 (Conjunction -> Equality .)
    OR              reduce using rule 26 (Conjunction -> Equality .)
    )               reduce using rule 26 (Conjunction -> Equality .)


state 45

    (28) Equality -> Relation .
    (29) Equality -> Relation . EquOp Relation
    (30) EquOp -> . EQ
    (31) EquOp -> . NEQ

    AND             reduce using rule 28 (Equality -> Relation .)
    ;               reduce using rule 28 (Equality -> Relation .)
    OR              reduce using rule 28 (Equality -> Relation .)
    )               reduce using rule 28 (Equality -> Relation .)
    EQ              shift and go to state 61
    NEQ             shift and go to state 62

    EquOp                          shift and go to state 60

state 46

    (32) Relation -> Addition .
    (33) Relation -> Addition . RelOp Addition
    (39) Addition -> Addition . AddOp Term
    (34) RelOp -> . <
    (35) RelOp -> . LTE
    (36) RelOp -> . >
    (37) RelOp -> . GTE
    (40) AddOp -> . +
    (41) AddOp -> . -

    EQ              reduce using rule 32 (Relation -> Addition .)
    NEQ             reduce using rule 32 (Relation -> Addition .)
    AND             reduce using rule 32 (Relation -> Addition .)
    ;               reduce using rule 32 (Relation -> Addition .)
    OR              reduce using rule 32 (Relation -> Addition .)
    )               reduce using rule 32 (Relation -> Addition .)
    <               shift and go to state 65
    LTE             shift and go to state 66
    >               shift and go to state 67
    GTE             shift and go to state 68
    +               shift and go to state 69
    -               shift and go to state 70

    RelOp                          shift and go to state 63
    AddOp                          shift and go to state 64

state 47

    (38) Addition -> Term .
    (43) Term -> Term . MulOp Primary
    (44) MulOp -> . *
    (45) MulOp -> . /
    (46) MulOp -> . %

    <               reduce using rule 38 (Addition -> Term .)
    LTE             reduce using rule 38 (Addition -> Term .)
    >               reduce using rule 38 (Addition -> Term .)
    GTE             reduce using rule 38 (Addition -> Term .)
    +               reduce using rule 38 (Addition -> Term .)
    -               reduce using rule 38 (Addition -> Term .)
    EQ              reduce using rule 38 (Addition -> Term .)
    NEQ             reduce using rule 38 (Addition -> Term .)
    AND             reduce using rule 38 (Addition -> Term .)
    ;               reduce using rule 38 (Addition -> Term .)
    OR              reduce using rule 38 (Addition -> Term .)
    )               reduce using rule 38 (Addition -> Term .)
    *               shift and go to state 72
    /               shift and go to state 73
    %               shift and go to state 74

    MulOp                          shift and go to state 71

state 48

    (42) Term -> Factor .

    *               reduce using rule 42 (Term -> Factor .)
    /               reduce using rule 42 (Term -> Factor .)
    %               reduce using rule 42 (Term -> Factor .)
    <               reduce using rule 42 (Term -> Factor .)
    LTE             reduce using rule 42 (Term -> Factor .)
    >               reduce using rule 42 (Term -> Factor .)
    GTE             reduce using rule 42 (Term -> Factor .)
    +               reduce using rule 42 (Term -> Factor .)
    -               reduce using rule 42 (Term -> Factor .)
    EQ              reduce using rule 42 (Term -> Factor .)
    NEQ             reduce using rule 42 (Term -> Factor .)
    AND             reduce using rule 42 (Term -> Factor .)
    ;               reduce using rule 42 (Term -> Factor .)
    OR              reduce using rule 42 (Term -> Factor .)
    )               reduce using rule 42 (Term -> Factor .)


state 49

    (47) Factor -> Primary .

    *               reduce using rule 47 (Factor -> Primary .)
    /               reduce using rule 47 (Factor -> Primary .)
    %               reduce using rule 47 (Factor -> Primary .)
    <               reduce using rule 47 (Factor -> Primary .)
    LTE             reduce using rule 47 (Factor -> Primary .)
    >               reduce using rule 47 (Factor -> Primary .)
    GTE             reduce using rule 47 (Factor -> Primary .)
    +               reduce using rule 47 (Factor -> Primary .)
    -               reduce using rule 47 (Factor -> Primary .)
    EQ              reduce using rule 47 (Factor -> Primary .)
    NEQ             reduce using rule 47 (Factor -> Primary .)
    AND             reduce using rule 47 (Factor -> Primary .)
    ;               reduce using rule 47 (Factor -> Primary .)
    OR              reduce using rule 47 (Factor -> Primary .)
    )               reduce using rule 47 (Factor -> Primary .)


state 50

    (48) Factor -> UnaryOp . Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID

    INTLIT          shift and go to state 51
    ID              shift and go to state 41

    Primary                        shift and go to state 75

state 51

    (51) Primary -> INTLIT .

    *               reduce using rule 51 (Primary -> INTLIT .)
    /               reduce using rule 51 (Primary -> INTLIT .)
    %               reduce using rule 51 (Primary -> INTLIT .)
    <               reduce using rule 51 (Primary -> INTLIT .)
    LTE             reduce using rule 51 (Primary -> INTLIT .)
    >               reduce using rule 51 (Primary -> INTLIT .)
    GTE             reduce using rule 51 (Primary -> INTLIT .)
    +               reduce using rule 51 (Primary -> INTLIT .)
    -               reduce using rule 51 (Primary -> INTLIT .)
    EQ              reduce using rule 51 (Primary -> INTLIT .)
    NEQ             reduce using rule 51 (Primary -> INTLIT .)
    AND             reduce using rule 51 (Primary -> INTLIT .)
    ;               reduce using rule 51 (Primary -> INTLIT .)
    OR              reduce using rule 51 (Primary -> INTLIT .)
    )               reduce using rule 51 (Primary -> INTLIT .)


state 52

    (49) UnaryOp -> - .

    INTLIT          reduce using rule 49 (UnaryOp -> - .)
    ID              reduce using rule 49 (UnaryOp -> - .)


state 53

    (50) UnaryOp -> ! .

    INTLIT          reduce using rule 50 (UnaryOp -> ! .)
    ID              reduce using rule 50 (UnaryOp -> ! .)


state 54

    (20) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (25) Expression -> Expression . OR Conjunction

    )               shift and go to state 76
    OR              shift and go to state 58


state 55

    (21) WhileStatement -> WHILE ( Expression . ) Statement
    (25) Expression -> Expression . OR Conjunction

    )               shift and go to state 77
    OR              shift and go to state 58


state 56

    (22) ForStatement -> FOR ( Assignment . Expression ; Assignment ) Statement
    (24) Expression -> . Conjunction
    (25) Expression -> . Expression OR Conjunction
    (26) Conjunction -> . Equality
    (27) Conjunction -> . Conjunction AND Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Expression                     shift and go to state 78
    Conjunction                    shift and go to state 43
    Equality                       shift and go to state 44
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 57

    (23) Assignment -> ID = Expression ; .

    ;               reduce using rule 23 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 23 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 23 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 23 (Assignment -> ID = Expression ; .)
    FOR             reduce using rule 23 (Assignment -> ID = Expression ; .)
    {               reduce using rule 23 (Assignment -> ID = Expression ; .)
    }               reduce using rule 23 (Assignment -> ID = Expression ; .)
    INTLIT          reduce using rule 23 (Assignment -> ID = Expression ; .)
    -               reduce using rule 23 (Assignment -> ID = Expression ; .)
    !               reduce using rule 23 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 23 (Assignment -> ID = Expression ; .)
    )               reduce using rule 23 (Assignment -> ID = Expression ; .)


state 58

    (25) Expression -> Expression OR . Conjunction
    (26) Conjunction -> . Equality
    (27) Conjunction -> . Conjunction AND Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Conjunction                    shift and go to state 79
    Equality                       shift and go to state 44
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 59

    (27) Conjunction -> Conjunction AND . Equality
    (28) Equality -> . Relation
    (29) Equality -> . Relation EquOp Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Equality                       shift and go to state 80
    Relation                       shift and go to state 45
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 60

    (29) Equality -> Relation EquOp . Relation
    (32) Relation -> . Addition
    (33) Relation -> . Addition RelOp Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Relation                       shift and go to state 81
    Addition                       shift and go to state 46
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 61

    (30) EquOp -> EQ .

    INTLIT          reduce using rule 30 (EquOp -> EQ .)
    ID              reduce using rule 30 (EquOp -> EQ .)
    -               reduce using rule 30 (EquOp -> EQ .)
    !               reduce using rule 30 (EquOp -> EQ .)


state 62

    (31) EquOp -> NEQ .

    INTLIT          reduce using rule 31 (EquOp -> NEQ .)
    ID              reduce using rule 31 (EquOp -> NEQ .)
    -               reduce using rule 31 (EquOp -> NEQ .)
    !               reduce using rule 31 (EquOp -> NEQ .)


state 63

    (33) Relation -> Addition RelOp . Addition
    (38) Addition -> . Term
    (39) Addition -> . Addition AddOp Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Addition                       shift and go to state 82
    Term                           shift and go to state 47
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 64

    (39) Addition -> Addition AddOp . Term
    (42) Term -> . Factor
    (43) Term -> . Term MulOp Primary
    (47) Factor -> . Primary
    (48) Factor -> . UnaryOp Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID
    (49) UnaryOp -> . -
    (50) UnaryOp -> . !

    INTLIT          shift and go to state 51
    ID              shift and go to state 41
    -               shift and go to state 52
    !               shift and go to state 53

    Term                           shift and go to state 83
    Factor                         shift and go to state 48
    Primary                        shift and go to state 49
    UnaryOp                        shift and go to state 50

state 65

    (34) RelOp -> < .

    INTLIT          reduce using rule 34 (RelOp -> < .)
    ID              reduce using rule 34 (RelOp -> < .)
    -               reduce using rule 34 (RelOp -> < .)
    !               reduce using rule 34 (RelOp -> < .)


state 66

    (35) RelOp -> LTE .

    INTLIT          reduce using rule 35 (RelOp -> LTE .)
    ID              reduce using rule 35 (RelOp -> LTE .)
    -               reduce using rule 35 (RelOp -> LTE .)
    !               reduce using rule 35 (RelOp -> LTE .)


state 67

    (36) RelOp -> > .

    INTLIT          reduce using rule 36 (RelOp -> > .)
    ID              reduce using rule 36 (RelOp -> > .)
    -               reduce using rule 36 (RelOp -> > .)
    !               reduce using rule 36 (RelOp -> > .)


state 68

    (37) RelOp -> GTE .

    INTLIT          reduce using rule 37 (RelOp -> GTE .)
    ID              reduce using rule 37 (RelOp -> GTE .)
    -               reduce using rule 37 (RelOp -> GTE .)
    !               reduce using rule 37 (RelOp -> GTE .)


state 69

    (40) AddOp -> + .

    INTLIT          reduce using rule 40 (AddOp -> + .)
    ID              reduce using rule 40 (AddOp -> + .)
    -               reduce using rule 40 (AddOp -> + .)
    !               reduce using rule 40 (AddOp -> + .)


state 70

    (41) AddOp -> - .

    INTLIT          reduce using rule 41 (AddOp -> - .)
    ID              reduce using rule 41 (AddOp -> - .)
    -               reduce using rule 41 (AddOp -> - .)
    !               reduce using rule 41 (AddOp -> - .)


state 71

    (43) Term -> Term MulOp . Primary
    (51) Primary -> . INTLIT
    (52) Primary -> . ID

    INTLIT          shift and go to state 51
    ID              shift and go to state 41

    Primary                        shift and go to state 84

state 72

    (44) MulOp -> * .

    INTLIT          reduce using rule 44 (MulOp -> * .)
    ID              reduce using rule 44 (MulOp -> * .)


state 73

    (45) MulOp -> / .

    INTLIT          reduce using rule 45 (MulOp -> / .)
    ID              reduce using rule 45 (MulOp -> / .)


state 74

    (46) MulOp -> % .

    INTLIT          reduce using rule 46 (MulOp -> % .)
    ID              reduce using rule 46 (MulOp -> % .)


state 75

    (48) Factor -> UnaryOp Primary .

    *               reduce using rule 48 (Factor -> UnaryOp Primary .)
    /               reduce using rule 48 (Factor -> UnaryOp Primary .)
    %               reduce using rule 48 (Factor -> UnaryOp Primary .)
    <               reduce using rule 48 (Factor -> UnaryOp Primary .)
    LTE             reduce using rule 48 (Factor -> UnaryOp Primary .)
    >               reduce using rule 48 (Factor -> UnaryOp Primary .)
    GTE             reduce using rule 48 (Factor -> UnaryOp Primary .)
    +               reduce using rule 48 (Factor -> UnaryOp Primary .)
    -               reduce using rule 48 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 48 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 48 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 48 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 48 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 48 (Factor -> UnaryOp Primary .)
    )               reduce using rule 48 (Factor -> UnaryOp Primary .)


state 76

    (20) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statement                      shift and go to state 85
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 77

    (21) WhileStatement -> WHILE ( Expression ) . Statement
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statement                      shift and go to state 86
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 78

    (22) ForStatement -> FOR ( Assignment Expression . ; Assignment ) Statement
    (25) Expression -> Expression . OR Conjunction

    ;               shift and go to state 87
    OR              shift and go to state 58


state 79

    (25) Expression -> Expression OR Conjunction .
    (27) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 25 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 25 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 25 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 59


state 80

    (27) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 27 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 27 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 27 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 27 (Conjunction -> Conjunction AND Equality .)


state 81

    (29) Equality -> Relation EquOp Relation .

    AND             reduce using rule 29 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 29 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 29 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 29 (Equality -> Relation EquOp Relation .)


state 82

    (33) Relation -> Addition RelOp Addition .
    (39) Addition -> Addition . AddOp Term
    (40) AddOp -> . +
    (41) AddOp -> . -

    EQ              reduce using rule 33 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 33 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 33 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 33 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 33 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 33 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 69
    -               shift and go to state 70

    AddOp                          shift and go to state 64

state 83

    (39) Addition -> Addition AddOp Term .
    (43) Term -> Term . MulOp Primary
    (44) MulOp -> . *
    (45) MulOp -> . /
    (46) MulOp -> . %

    <               reduce using rule 39 (Addition -> Addition AddOp Term .)
    LTE             reduce using rule 39 (Addition -> Addition AddOp Term .)
    >               reduce using rule 39 (Addition -> Addition AddOp Term .)
    GTE             reduce using rule 39 (Addition -> Addition AddOp Term .)
    +               reduce using rule 39 (Addition -> Addition AddOp Term .)
    -               reduce using rule 39 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 39 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 39 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 39 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 39 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 39 (Addition -> Addition AddOp Term .)
    )               reduce using rule 39 (Addition -> Addition AddOp Term .)
    *               shift and go to state 72
    /               shift and go to state 73
    %               shift and go to state 74

    MulOp                          shift and go to state 71

state 84

    (43) Term -> Term MulOp Primary .

    *               reduce using rule 43 (Term -> Term MulOp Primary .)
    /               reduce using rule 43 (Term -> Term MulOp Primary .)
    %               reduce using rule 43 (Term -> Term MulOp Primary .)
    <               reduce using rule 43 (Term -> Term MulOp Primary .)
    LTE             reduce using rule 43 (Term -> Term MulOp Primary .)
    >               reduce using rule 43 (Term -> Term MulOp Primary .)
    GTE             reduce using rule 43 (Term -> Term MulOp Primary .)
    +               reduce using rule 43 (Term -> Term MulOp Primary .)
    -               reduce using rule 43 (Term -> Term MulOp Primary .)
    EQ              reduce using rule 43 (Term -> Term MulOp Primary .)
    NEQ             reduce using rule 43 (Term -> Term MulOp Primary .)
    AND             reduce using rule 43 (Term -> Term MulOp Primary .)
    ;               reduce using rule 43 (Term -> Term MulOp Primary .)
    OR              reduce using rule 43 (Term -> Term MulOp Primary .)
    )               reduce using rule 43 (Term -> Term MulOp Primary .)


state 85

    (20) IfStatement -> IF ( Expression ) Statement . ELSE Statement

    ELSE            shift and go to state 88


state 86

    (21) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 21 (WhileStatement -> WHILE ( Expression ) Statement .)


state 87

    (22) ForStatement -> FOR ( Assignment Expression ; . Assignment ) Statement
    (23) Assignment -> . ID = Expression ;

    ID              shift and go to state 26

    Assignment                     shift and go to state 89

state 88

    (20) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Statement                      shift and go to state 90
    Assignment                     shift and go to state 20
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 89

    (22) ForStatement -> FOR ( Assignment Expression ; Assignment . ) Statement

    )               shift and go to state 91


state 90

    (20) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    FOR             reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 20 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)


state 91

    (22) ForStatement -> FOR ( Assignment Expression ; Assignment ) . Statement
    (13) Statement -> . Assignment
    (14) Statement -> . IfStatement
    (15) Statement -> . WhileStatement
    (16) Statement -> . ForStatement
    (17) Statement -> . ;
    (18) Statement -> . Block
    (23) Assignment -> . ID = Expression ;
    (20) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (21) WhileStatement -> . WHILE ( Expression ) Statement
    (22) ForStatement -> . FOR ( Assignment Expression ; Assignment ) Statement
    (19) Block -> . { Statements }

    ;               shift and go to state 24
    ID              shift and go to state 26
    IF              shift and go to state 27
    WHILE           shift and go to state 28
    FOR             shift and go to state 29
    {               shift and go to state 16

    Assignment                     shift and go to state 20
    Statement                      shift and go to state 92
    IfStatement                    shift and go to state 21
    WhileStatement                 shift and go to state 22
    ForStatement                   shift and go to state 23
    Block                          shift and go to state 25

state 92

    (22) ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .

    ;               reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    ID              reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    IF              reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    WHILE           reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    FOR             reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    {               reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    }               reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)
    ELSE            reduce using rule 22 (ForStatement -> FOR ( Assignment Expression ; Assignment ) Statement .)

