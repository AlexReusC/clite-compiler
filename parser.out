Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN

Grammar

Rule 0     S' -> Program
Rule 1     Program -> INT MAIN ( ) { Declarations Statements }
Rule 2     empty -> <empty>
Rule 3     Declarations -> Declaration Declarations
Rule 4     Declarations -> empty
Rule 5     Declaration -> Type ID ;
Rule 6     Type -> INT
Rule 7     Type -> BOOL
Rule 8     Type -> FLOAT
Rule 9     Type -> CHAR
Rule 10    Statements -> Statement Statements
Rule 11    Statements -> empty
Rule 12    Statement -> Assignment
Rule 13    Statement -> IfStatement
Rule 14    Statement -> WhileStatement
Rule 15    Statement -> ;
Rule 16    Statement -> Block
Rule 17    Block -> { Statements }
Rule 18    IfStatement -> IF ( Expression ) Statement ELSE Statement
Rule 19    WhileStatement -> WHILE ( Expression ) Statement
Rule 20    Assignment -> ID = Expression ;
Rule 21    Expression -> Conjunction
Rule 22    Expression -> Expression OR Conjunction
Rule 23    Conjunction -> Equality
Rule 24    Conjunction -> Conjunction AND Equality
Rule 25    Equality -> Relation
Rule 26    Equality -> Relation EquOp Relation
Rule 27    EquOp -> EQ
Rule 28    EquOp -> NEQ
Rule 29    Relation -> Addition
Rule 30    Relation -> Addition RelOp Addition
Rule 31    RelOp -> <
Rule 32    RelOp -> LTE
Rule 33    RelOp -> >
Rule 34    RelOp -> GTE
Rule 35    Addition -> Term
Rule 36    Addition -> Addition AddOp Term
Rule 37    AddOp -> +
Rule 38    AddOp -> -
Rule 39    Term -> Factor
Rule 40    Term -> Term MulOp Primary
Rule 41    MulOp -> *
Rule 42    MulOp -> /
Rule 43    MulOp -> %
Rule 44    Factor -> Primary
Rule 45    Factor -> UnaryOp Primary
Rule 46    UnaryOp -> -
Rule 47    UnaryOp -> !
Rule 48    Primary -> INTLIT
Rule 49    Primary -> ID

Terminals, with rules where they appear

!                    : 47
%                    : 43
(                    : 1 18 19
)                    : 1 18 19
*                    : 41
+                    : 37
-                    : 38 46
/                    : 42
;                    : 5 15 20
<                    : 31
=                    : 20
>                    : 33
AND                  : 24
BOOL                 : 7
CHAR                 : 9
ELSE                 : 18
EQ                   : 27
FLOAT                : 8
GTE                  : 34
ID                   : 5 20 49
IF                   : 18
INT                  : 1 6
INTLIT               : 48
LTE                  : 32
MAIN                 : 1
NEQ                  : 28
OR                   : 22
RETURN               : 
WHILE                : 19
error                : 
{                    : 1 17
}                    : 1 17

Nonterminals, with rules where they appear

AddOp                : 36
Addition             : 29 30 30 36
Assignment           : 12
Block                : 16
Conjunction          : 21 22 24
Declaration          : 3
Declarations         : 1 3
EquOp                : 26
Equality             : 23 24
Expression           : 18 19 20 22
Factor               : 39
IfStatement          : 13
MulOp                : 40
Primary              : 40 44 45
Program              : 0
RelOp                : 30
Relation             : 25 26 26
Statement            : 10 18 18 19
Statements           : 1 10 17
Term                 : 35 36 40
Type                 : 5
UnaryOp              : 45
WhileStatement       : 14
empty                : 4 11

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . INT MAIN ( ) { Declarations Statements }

    INT             shift and go to state 2

    Program                        shift and go to state 1

state 1

    (0) S' -> Program .



state 2

    (1) Program -> INT . MAIN ( ) { Declarations Statements }

    MAIN            shift and go to state 3


state 3

    (1) Program -> INT MAIN . ( ) { Declarations Statements }

    (               shift and go to state 4


state 4

    (1) Program -> INT MAIN ( . ) { Declarations Statements }

    )               shift and go to state 5


state 5

    (1) Program -> INT MAIN ( ) . { Declarations Statements }

    {               shift and go to state 6


state 6

    (1) Program -> INT MAIN ( ) { . Declarations Statements }
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . Type ID ;
    (2) empty -> .
    (6) Type -> . INT
    (7) Type -> . BOOL
    (8) Type -> . FLOAT
    (9) Type -> . CHAR

    ;               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    Declarations                   shift and go to state 8
    Declaration                    shift and go to state 9
    empty                          shift and go to state 10
    Type                           shift and go to state 11

state 7

    (6) Type -> INT .

    ID              reduce using rule 6 (Type -> INT .)


state 8

    (1) Program -> INT MAIN ( ) { Declarations . Statements }
    (10) Statements -> . Statement Statements
    (11) Statements -> . empty
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (2) empty -> .
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statements                     shift and go to state 16
    Statement                      shift and go to state 17
    empty                          shift and go to state 18
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 9

    (3) Declarations -> Declaration . Declarations
    (3) Declarations -> . Declaration Declarations
    (4) Declarations -> . empty
    (5) Declaration -> . Type ID ;
    (2) empty -> .
    (6) Type -> . INT
    (7) Type -> . BOOL
    (8) Type -> . FLOAT
    (9) Type -> . CHAR

    ;               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    }               reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    BOOL            shift and go to state 12
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 14

    Declaration                    shift and go to state 9
    Declarations                   shift and go to state 27
    empty                          shift and go to state 10
    Type                           shift and go to state 11

state 10

    (4) Declarations -> empty .

    ;               reduce using rule 4 (Declarations -> empty .)
    ID              reduce using rule 4 (Declarations -> empty .)
    IF              reduce using rule 4 (Declarations -> empty .)
    WHILE           reduce using rule 4 (Declarations -> empty .)
    {               reduce using rule 4 (Declarations -> empty .)
    }               reduce using rule 4 (Declarations -> empty .)


state 11

    (5) Declaration -> Type . ID ;

    ID              shift and go to state 28


state 12

    (7) Type -> BOOL .

    ID              reduce using rule 7 (Type -> BOOL .)


state 13

    (8) Type -> FLOAT .

    ID              reduce using rule 8 (Type -> FLOAT .)


state 14

    (9) Type -> CHAR .

    ID              reduce using rule 9 (Type -> CHAR .)


state 15

    (17) Block -> { . Statements }
    (10) Statements -> . Statement Statements
    (11) Statements -> . empty
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (2) empty -> .
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statements                     shift and go to state 29
    Statement                      shift and go to state 17
    empty                          shift and go to state 18
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 16

    (1) Program -> INT MAIN ( ) { Declarations Statements . }

    }               shift and go to state 30


state 17

    (10) Statements -> Statement . Statements
    (10) Statements -> . Statement Statements
    (11) Statements -> . empty
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (2) empty -> .
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    }               reduce using rule 2 (empty -> .)
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statement                      shift and go to state 17
    Statements                     shift and go to state 31
    empty                          shift and go to state 18
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 18

    (11) Statements -> empty .

    }               reduce using rule 11 (Statements -> empty .)


state 19

    (12) Statement -> Assignment .

    ;               reduce using rule 12 (Statement -> Assignment .)
    ID              reduce using rule 12 (Statement -> Assignment .)
    IF              reduce using rule 12 (Statement -> Assignment .)
    WHILE           reduce using rule 12 (Statement -> Assignment .)
    {               reduce using rule 12 (Statement -> Assignment .)
    }               reduce using rule 12 (Statement -> Assignment .)
    ELSE            reduce using rule 12 (Statement -> Assignment .)


state 20

    (13) Statement -> IfStatement .

    ;               reduce using rule 13 (Statement -> IfStatement .)
    ID              reduce using rule 13 (Statement -> IfStatement .)
    IF              reduce using rule 13 (Statement -> IfStatement .)
    WHILE           reduce using rule 13 (Statement -> IfStatement .)
    {               reduce using rule 13 (Statement -> IfStatement .)
    }               reduce using rule 13 (Statement -> IfStatement .)
    ELSE            reduce using rule 13 (Statement -> IfStatement .)


state 21

    (14) Statement -> WhileStatement .

    ;               reduce using rule 14 (Statement -> WhileStatement .)
    ID              reduce using rule 14 (Statement -> WhileStatement .)
    IF              reduce using rule 14 (Statement -> WhileStatement .)
    WHILE           reduce using rule 14 (Statement -> WhileStatement .)
    {               reduce using rule 14 (Statement -> WhileStatement .)
    }               reduce using rule 14 (Statement -> WhileStatement .)
    ELSE            reduce using rule 14 (Statement -> WhileStatement .)


state 22

    (15) Statement -> ; .

    ;               reduce using rule 15 (Statement -> ; .)
    ID              reduce using rule 15 (Statement -> ; .)
    IF              reduce using rule 15 (Statement -> ; .)
    WHILE           reduce using rule 15 (Statement -> ; .)
    {               reduce using rule 15 (Statement -> ; .)
    }               reduce using rule 15 (Statement -> ; .)
    ELSE            reduce using rule 15 (Statement -> ; .)


state 23

    (16) Statement -> Block .

    ;               reduce using rule 16 (Statement -> Block .)
    ID              reduce using rule 16 (Statement -> Block .)
    IF              reduce using rule 16 (Statement -> Block .)
    WHILE           reduce using rule 16 (Statement -> Block .)
    {               reduce using rule 16 (Statement -> Block .)
    }               reduce using rule 16 (Statement -> Block .)
    ELSE            reduce using rule 16 (Statement -> Block .)


state 24

    (20) Assignment -> ID . = Expression ;

    =               shift and go to state 32


state 25

    (18) IfStatement -> IF . ( Expression ) Statement ELSE Statement

    (               shift and go to state 33


state 26

    (19) WhileStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 34


state 27

    (3) Declarations -> Declaration Declarations .

    ;               reduce using rule 3 (Declarations -> Declaration Declarations .)
    ID              reduce using rule 3 (Declarations -> Declaration Declarations .)
    IF              reduce using rule 3 (Declarations -> Declaration Declarations .)
    WHILE           reduce using rule 3 (Declarations -> Declaration Declarations .)
    {               reduce using rule 3 (Declarations -> Declaration Declarations .)
    }               reduce using rule 3 (Declarations -> Declaration Declarations .)


state 28

    (5) Declaration -> Type ID . ;

    ;               shift and go to state 35


state 29

    (17) Block -> { Statements . }

    }               shift and go to state 36


state 30

    (1) Program -> INT MAIN ( ) { Declarations Statements } .

    $end            reduce using rule 1 (Program -> INT MAIN ( ) { Declarations Statements } .)


state 31

    (10) Statements -> Statement Statements .

    }               reduce using rule 10 (Statements -> Statement Statements .)


state 32

    (20) Assignment -> ID = . Expression ;
    (21) Expression -> . Conjunction
    (22) Expression -> . Expression OR Conjunction
    (23) Conjunction -> . Equality
    (24) Conjunction -> . Conjunction AND Equality
    (25) Equality -> . Relation
    (26) Equality -> . Relation EquOp Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Expression                     shift and go to state 38
    Conjunction                    shift and go to state 39
    Equality                       shift and go to state 40
    Relation                       shift and go to state 41
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 33

    (18) IfStatement -> IF ( . Expression ) Statement ELSE Statement
    (21) Expression -> . Conjunction
    (22) Expression -> . Expression OR Conjunction
    (23) Conjunction -> . Equality
    (24) Conjunction -> . Conjunction AND Equality
    (25) Equality -> . Relation
    (26) Equality -> . Relation EquOp Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Expression                     shift and go to state 50
    Conjunction                    shift and go to state 39
    Equality                       shift and go to state 40
    Relation                       shift and go to state 41
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 34

    (19) WhileStatement -> WHILE ( . Expression ) Statement
    (21) Expression -> . Conjunction
    (22) Expression -> . Expression OR Conjunction
    (23) Conjunction -> . Equality
    (24) Conjunction -> . Conjunction AND Equality
    (25) Equality -> . Relation
    (26) Equality -> . Relation EquOp Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Expression                     shift and go to state 51
    Conjunction                    shift and go to state 39
    Equality                       shift and go to state 40
    Relation                       shift and go to state 41
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 35

    (5) Declaration -> Type ID ; .

    INT             reduce using rule 5 (Declaration -> Type ID ; .)
    BOOL            reduce using rule 5 (Declaration -> Type ID ; .)
    FLOAT           reduce using rule 5 (Declaration -> Type ID ; .)
    CHAR            reduce using rule 5 (Declaration -> Type ID ; .)
    ;               reduce using rule 5 (Declaration -> Type ID ; .)
    ID              reduce using rule 5 (Declaration -> Type ID ; .)
    IF              reduce using rule 5 (Declaration -> Type ID ; .)
    WHILE           reduce using rule 5 (Declaration -> Type ID ; .)
    {               reduce using rule 5 (Declaration -> Type ID ; .)
    }               reduce using rule 5 (Declaration -> Type ID ; .)


state 36

    (17) Block -> { Statements } .

    ;               reduce using rule 17 (Block -> { Statements } .)
    ID              reduce using rule 17 (Block -> { Statements } .)
    IF              reduce using rule 17 (Block -> { Statements } .)
    WHILE           reduce using rule 17 (Block -> { Statements } .)
    {               reduce using rule 17 (Block -> { Statements } .)
    }               reduce using rule 17 (Block -> { Statements } .)
    ELSE            reduce using rule 17 (Block -> { Statements } .)


state 37

    (49) Primary -> ID .

    *               reduce using rule 49 (Primary -> ID .)
    /               reduce using rule 49 (Primary -> ID .)
    %               reduce using rule 49 (Primary -> ID .)
    <               reduce using rule 49 (Primary -> ID .)
    LTE             reduce using rule 49 (Primary -> ID .)
    >               reduce using rule 49 (Primary -> ID .)
    GTE             reduce using rule 49 (Primary -> ID .)
    +               reduce using rule 49 (Primary -> ID .)
    -               reduce using rule 49 (Primary -> ID .)
    EQ              reduce using rule 49 (Primary -> ID .)
    NEQ             reduce using rule 49 (Primary -> ID .)
    AND             reduce using rule 49 (Primary -> ID .)
    ;               reduce using rule 49 (Primary -> ID .)
    OR              reduce using rule 49 (Primary -> ID .)
    )               reduce using rule 49 (Primary -> ID .)


state 38

    (20) Assignment -> ID = Expression . ;
    (22) Expression -> Expression . OR Conjunction

    ;               shift and go to state 52
    OR              shift and go to state 53


state 39

    (21) Expression -> Conjunction .
    (24) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 21 (Expression -> Conjunction .)
    OR              reduce using rule 21 (Expression -> Conjunction .)
    )               reduce using rule 21 (Expression -> Conjunction .)
    AND             shift and go to state 54


state 40

    (23) Conjunction -> Equality .

    AND             reduce using rule 23 (Conjunction -> Equality .)
    ;               reduce using rule 23 (Conjunction -> Equality .)
    OR              reduce using rule 23 (Conjunction -> Equality .)
    )               reduce using rule 23 (Conjunction -> Equality .)


state 41

    (25) Equality -> Relation .
    (26) Equality -> Relation . EquOp Relation
    (27) EquOp -> . EQ
    (28) EquOp -> . NEQ

    AND             reduce using rule 25 (Equality -> Relation .)
    ;               reduce using rule 25 (Equality -> Relation .)
    OR              reduce using rule 25 (Equality -> Relation .)
    )               reduce using rule 25 (Equality -> Relation .)
    EQ              shift and go to state 56
    NEQ             shift and go to state 57

    EquOp                          shift and go to state 55

state 42

    (29) Relation -> Addition .
    (30) Relation -> Addition . RelOp Addition
    (36) Addition -> Addition . AddOp Term
    (31) RelOp -> . <
    (32) RelOp -> . LTE
    (33) RelOp -> . >
    (34) RelOp -> . GTE
    (37) AddOp -> . +
    (38) AddOp -> . -

    EQ              reduce using rule 29 (Relation -> Addition .)
    NEQ             reduce using rule 29 (Relation -> Addition .)
    AND             reduce using rule 29 (Relation -> Addition .)
    ;               reduce using rule 29 (Relation -> Addition .)
    OR              reduce using rule 29 (Relation -> Addition .)
    )               reduce using rule 29 (Relation -> Addition .)
    <               shift and go to state 60
    LTE             shift and go to state 61
    >               shift and go to state 62
    GTE             shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65

    RelOp                          shift and go to state 58
    AddOp                          shift and go to state 59

state 43

    (35) Addition -> Term .
    (40) Term -> Term . MulOp Primary
    (41) MulOp -> . *
    (42) MulOp -> . /
    (43) MulOp -> . %

    <               reduce using rule 35 (Addition -> Term .)
    LTE             reduce using rule 35 (Addition -> Term .)
    >               reduce using rule 35 (Addition -> Term .)
    GTE             reduce using rule 35 (Addition -> Term .)
    +               reduce using rule 35 (Addition -> Term .)
    -               reduce using rule 35 (Addition -> Term .)
    EQ              reduce using rule 35 (Addition -> Term .)
    NEQ             reduce using rule 35 (Addition -> Term .)
    AND             reduce using rule 35 (Addition -> Term .)
    ;               reduce using rule 35 (Addition -> Term .)
    OR              reduce using rule 35 (Addition -> Term .)
    )               reduce using rule 35 (Addition -> Term .)
    *               shift and go to state 67
    /               shift and go to state 68
    %               shift and go to state 69

    MulOp                          shift and go to state 66

state 44

    (39) Term -> Factor .

    *               reduce using rule 39 (Term -> Factor .)
    /               reduce using rule 39 (Term -> Factor .)
    %               reduce using rule 39 (Term -> Factor .)
    <               reduce using rule 39 (Term -> Factor .)
    LTE             reduce using rule 39 (Term -> Factor .)
    >               reduce using rule 39 (Term -> Factor .)
    GTE             reduce using rule 39 (Term -> Factor .)
    +               reduce using rule 39 (Term -> Factor .)
    -               reduce using rule 39 (Term -> Factor .)
    EQ              reduce using rule 39 (Term -> Factor .)
    NEQ             reduce using rule 39 (Term -> Factor .)
    AND             reduce using rule 39 (Term -> Factor .)
    ;               reduce using rule 39 (Term -> Factor .)
    OR              reduce using rule 39 (Term -> Factor .)
    )               reduce using rule 39 (Term -> Factor .)


state 45

    (44) Factor -> Primary .

    *               reduce using rule 44 (Factor -> Primary .)
    /               reduce using rule 44 (Factor -> Primary .)
    %               reduce using rule 44 (Factor -> Primary .)
    <               reduce using rule 44 (Factor -> Primary .)
    LTE             reduce using rule 44 (Factor -> Primary .)
    >               reduce using rule 44 (Factor -> Primary .)
    GTE             reduce using rule 44 (Factor -> Primary .)
    +               reduce using rule 44 (Factor -> Primary .)
    -               reduce using rule 44 (Factor -> Primary .)
    EQ              reduce using rule 44 (Factor -> Primary .)
    NEQ             reduce using rule 44 (Factor -> Primary .)
    AND             reduce using rule 44 (Factor -> Primary .)
    ;               reduce using rule 44 (Factor -> Primary .)
    OR              reduce using rule 44 (Factor -> Primary .)
    )               reduce using rule 44 (Factor -> Primary .)


state 46

    (45) Factor -> UnaryOp . Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID

    INTLIT          shift and go to state 47
    ID              shift and go to state 37

    Primary                        shift and go to state 70

state 47

    (48) Primary -> INTLIT .

    *               reduce using rule 48 (Primary -> INTLIT .)
    /               reduce using rule 48 (Primary -> INTLIT .)
    %               reduce using rule 48 (Primary -> INTLIT .)
    <               reduce using rule 48 (Primary -> INTLIT .)
    LTE             reduce using rule 48 (Primary -> INTLIT .)
    >               reduce using rule 48 (Primary -> INTLIT .)
    GTE             reduce using rule 48 (Primary -> INTLIT .)
    +               reduce using rule 48 (Primary -> INTLIT .)
    -               reduce using rule 48 (Primary -> INTLIT .)
    EQ              reduce using rule 48 (Primary -> INTLIT .)
    NEQ             reduce using rule 48 (Primary -> INTLIT .)
    AND             reduce using rule 48 (Primary -> INTLIT .)
    ;               reduce using rule 48 (Primary -> INTLIT .)
    OR              reduce using rule 48 (Primary -> INTLIT .)
    )               reduce using rule 48 (Primary -> INTLIT .)


state 48

    (46) UnaryOp -> - .

    INTLIT          reduce using rule 46 (UnaryOp -> - .)
    ID              reduce using rule 46 (UnaryOp -> - .)


state 49

    (47) UnaryOp -> ! .

    INTLIT          reduce using rule 47 (UnaryOp -> ! .)
    ID              reduce using rule 47 (UnaryOp -> ! .)


state 50

    (18) IfStatement -> IF ( Expression . ) Statement ELSE Statement
    (22) Expression -> Expression . OR Conjunction

    )               shift and go to state 71
    OR              shift and go to state 53


state 51

    (19) WhileStatement -> WHILE ( Expression . ) Statement
    (22) Expression -> Expression . OR Conjunction

    )               shift and go to state 72
    OR              shift and go to state 53


state 52

    (20) Assignment -> ID = Expression ; .

    ;               reduce using rule 20 (Assignment -> ID = Expression ; .)
    ID              reduce using rule 20 (Assignment -> ID = Expression ; .)
    IF              reduce using rule 20 (Assignment -> ID = Expression ; .)
    WHILE           reduce using rule 20 (Assignment -> ID = Expression ; .)
    {               reduce using rule 20 (Assignment -> ID = Expression ; .)
    }               reduce using rule 20 (Assignment -> ID = Expression ; .)
    ELSE            reduce using rule 20 (Assignment -> ID = Expression ; .)


state 53

    (22) Expression -> Expression OR . Conjunction
    (23) Conjunction -> . Equality
    (24) Conjunction -> . Conjunction AND Equality
    (25) Equality -> . Relation
    (26) Equality -> . Relation EquOp Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Conjunction                    shift and go to state 73
    Equality                       shift and go to state 40
    Relation                       shift and go to state 41
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 54

    (24) Conjunction -> Conjunction AND . Equality
    (25) Equality -> . Relation
    (26) Equality -> . Relation EquOp Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Equality                       shift and go to state 74
    Relation                       shift and go to state 41
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 55

    (26) Equality -> Relation EquOp . Relation
    (29) Relation -> . Addition
    (30) Relation -> . Addition RelOp Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Relation                       shift and go to state 75
    Addition                       shift and go to state 42
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 56

    (27) EquOp -> EQ .

    INTLIT          reduce using rule 27 (EquOp -> EQ .)
    ID              reduce using rule 27 (EquOp -> EQ .)
    -               reduce using rule 27 (EquOp -> EQ .)
    !               reduce using rule 27 (EquOp -> EQ .)


state 57

    (28) EquOp -> NEQ .

    INTLIT          reduce using rule 28 (EquOp -> NEQ .)
    ID              reduce using rule 28 (EquOp -> NEQ .)
    -               reduce using rule 28 (EquOp -> NEQ .)
    !               reduce using rule 28 (EquOp -> NEQ .)


state 58

    (30) Relation -> Addition RelOp . Addition
    (35) Addition -> . Term
    (36) Addition -> . Addition AddOp Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Addition                       shift and go to state 76
    Term                           shift and go to state 43
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 59

    (36) Addition -> Addition AddOp . Term
    (39) Term -> . Factor
    (40) Term -> . Term MulOp Primary
    (44) Factor -> . Primary
    (45) Factor -> . UnaryOp Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID
    (46) UnaryOp -> . -
    (47) UnaryOp -> . !

    INTLIT          shift and go to state 47
    ID              shift and go to state 37
    -               shift and go to state 48
    !               shift and go to state 49

    Term                           shift and go to state 77
    Factor                         shift and go to state 44
    Primary                        shift and go to state 45
    UnaryOp                        shift and go to state 46

state 60

    (31) RelOp -> < .

    INTLIT          reduce using rule 31 (RelOp -> < .)
    ID              reduce using rule 31 (RelOp -> < .)
    -               reduce using rule 31 (RelOp -> < .)
    !               reduce using rule 31 (RelOp -> < .)


state 61

    (32) RelOp -> LTE .

    INTLIT          reduce using rule 32 (RelOp -> LTE .)
    ID              reduce using rule 32 (RelOp -> LTE .)
    -               reduce using rule 32 (RelOp -> LTE .)
    !               reduce using rule 32 (RelOp -> LTE .)


state 62

    (33) RelOp -> > .

    INTLIT          reduce using rule 33 (RelOp -> > .)
    ID              reduce using rule 33 (RelOp -> > .)
    -               reduce using rule 33 (RelOp -> > .)
    !               reduce using rule 33 (RelOp -> > .)


state 63

    (34) RelOp -> GTE .

    INTLIT          reduce using rule 34 (RelOp -> GTE .)
    ID              reduce using rule 34 (RelOp -> GTE .)
    -               reduce using rule 34 (RelOp -> GTE .)
    !               reduce using rule 34 (RelOp -> GTE .)


state 64

    (37) AddOp -> + .

    INTLIT          reduce using rule 37 (AddOp -> + .)
    ID              reduce using rule 37 (AddOp -> + .)
    -               reduce using rule 37 (AddOp -> + .)
    !               reduce using rule 37 (AddOp -> + .)


state 65

    (38) AddOp -> - .

    INTLIT          reduce using rule 38 (AddOp -> - .)
    ID              reduce using rule 38 (AddOp -> - .)
    -               reduce using rule 38 (AddOp -> - .)
    !               reduce using rule 38 (AddOp -> - .)


state 66

    (40) Term -> Term MulOp . Primary
    (48) Primary -> . INTLIT
    (49) Primary -> . ID

    INTLIT          shift and go to state 47
    ID              shift and go to state 37

    Primary                        shift and go to state 78

state 67

    (41) MulOp -> * .

    INTLIT          reduce using rule 41 (MulOp -> * .)
    ID              reduce using rule 41 (MulOp -> * .)


state 68

    (42) MulOp -> / .

    INTLIT          reduce using rule 42 (MulOp -> / .)
    ID              reduce using rule 42 (MulOp -> / .)


state 69

    (43) MulOp -> % .

    INTLIT          reduce using rule 43 (MulOp -> % .)
    ID              reduce using rule 43 (MulOp -> % .)


state 70

    (45) Factor -> UnaryOp Primary .

    *               reduce using rule 45 (Factor -> UnaryOp Primary .)
    /               reduce using rule 45 (Factor -> UnaryOp Primary .)
    %               reduce using rule 45 (Factor -> UnaryOp Primary .)
    <               reduce using rule 45 (Factor -> UnaryOp Primary .)
    LTE             reduce using rule 45 (Factor -> UnaryOp Primary .)
    >               reduce using rule 45 (Factor -> UnaryOp Primary .)
    GTE             reduce using rule 45 (Factor -> UnaryOp Primary .)
    +               reduce using rule 45 (Factor -> UnaryOp Primary .)
    -               reduce using rule 45 (Factor -> UnaryOp Primary .)
    EQ              reduce using rule 45 (Factor -> UnaryOp Primary .)
    NEQ             reduce using rule 45 (Factor -> UnaryOp Primary .)
    AND             reduce using rule 45 (Factor -> UnaryOp Primary .)
    ;               reduce using rule 45 (Factor -> UnaryOp Primary .)
    OR              reduce using rule 45 (Factor -> UnaryOp Primary .)
    )               reduce using rule 45 (Factor -> UnaryOp Primary .)


state 71

    (18) IfStatement -> IF ( Expression ) . Statement ELSE Statement
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statement                      shift and go to state 79
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 72

    (19) WhileStatement -> WHILE ( Expression ) . Statement
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statement                      shift and go to state 80
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 73

    (22) Expression -> Expression OR Conjunction .
    (24) Conjunction -> Conjunction . AND Equality

    ;               reduce using rule 22 (Expression -> Expression OR Conjunction .)
    OR              reduce using rule 22 (Expression -> Expression OR Conjunction .)
    )               reduce using rule 22 (Expression -> Expression OR Conjunction .)
    AND             shift and go to state 54


state 74

    (24) Conjunction -> Conjunction AND Equality .

    AND             reduce using rule 24 (Conjunction -> Conjunction AND Equality .)
    ;               reduce using rule 24 (Conjunction -> Conjunction AND Equality .)
    OR              reduce using rule 24 (Conjunction -> Conjunction AND Equality .)
    )               reduce using rule 24 (Conjunction -> Conjunction AND Equality .)


state 75

    (26) Equality -> Relation EquOp Relation .

    AND             reduce using rule 26 (Equality -> Relation EquOp Relation .)
    ;               reduce using rule 26 (Equality -> Relation EquOp Relation .)
    OR              reduce using rule 26 (Equality -> Relation EquOp Relation .)
    )               reduce using rule 26 (Equality -> Relation EquOp Relation .)


state 76

    (30) Relation -> Addition RelOp Addition .
    (36) Addition -> Addition . AddOp Term
    (37) AddOp -> . +
    (38) AddOp -> . -

    EQ              reduce using rule 30 (Relation -> Addition RelOp Addition .)
    NEQ             reduce using rule 30 (Relation -> Addition RelOp Addition .)
    AND             reduce using rule 30 (Relation -> Addition RelOp Addition .)
    ;               reduce using rule 30 (Relation -> Addition RelOp Addition .)
    OR              reduce using rule 30 (Relation -> Addition RelOp Addition .)
    )               reduce using rule 30 (Relation -> Addition RelOp Addition .)
    +               shift and go to state 64
    -               shift and go to state 65

    AddOp                          shift and go to state 59

state 77

    (36) Addition -> Addition AddOp Term .
    (40) Term -> Term . MulOp Primary
    (41) MulOp -> . *
    (42) MulOp -> . /
    (43) MulOp -> . %

    <               reduce using rule 36 (Addition -> Addition AddOp Term .)
    LTE             reduce using rule 36 (Addition -> Addition AddOp Term .)
    >               reduce using rule 36 (Addition -> Addition AddOp Term .)
    GTE             reduce using rule 36 (Addition -> Addition AddOp Term .)
    +               reduce using rule 36 (Addition -> Addition AddOp Term .)
    -               reduce using rule 36 (Addition -> Addition AddOp Term .)
    EQ              reduce using rule 36 (Addition -> Addition AddOp Term .)
    NEQ             reduce using rule 36 (Addition -> Addition AddOp Term .)
    AND             reduce using rule 36 (Addition -> Addition AddOp Term .)
    ;               reduce using rule 36 (Addition -> Addition AddOp Term .)
    OR              reduce using rule 36 (Addition -> Addition AddOp Term .)
    )               reduce using rule 36 (Addition -> Addition AddOp Term .)
    *               shift and go to state 67
    /               shift and go to state 68
    %               shift and go to state 69

    MulOp                          shift and go to state 66

state 78

    (40) Term -> Term MulOp Primary .

    *               reduce using rule 40 (Term -> Term MulOp Primary .)
    /               reduce using rule 40 (Term -> Term MulOp Primary .)
    %               reduce using rule 40 (Term -> Term MulOp Primary .)
    <               reduce using rule 40 (Term -> Term MulOp Primary .)
    LTE             reduce using rule 40 (Term -> Term MulOp Primary .)
    >               reduce using rule 40 (Term -> Term MulOp Primary .)
    GTE             reduce using rule 40 (Term -> Term MulOp Primary .)
    +               reduce using rule 40 (Term -> Term MulOp Primary .)
    -               reduce using rule 40 (Term -> Term MulOp Primary .)
    EQ              reduce using rule 40 (Term -> Term MulOp Primary .)
    NEQ             reduce using rule 40 (Term -> Term MulOp Primary .)
    AND             reduce using rule 40 (Term -> Term MulOp Primary .)
    ;               reduce using rule 40 (Term -> Term MulOp Primary .)
    OR              reduce using rule 40 (Term -> Term MulOp Primary .)
    )               reduce using rule 40 (Term -> Term MulOp Primary .)


state 79

    (18) IfStatement -> IF ( Expression ) Statement . ELSE Statement

    ELSE            shift and go to state 81


state 80

    (19) WhileStatement -> WHILE ( Expression ) Statement .

    ;               reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    ID              reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 19 (WhileStatement -> WHILE ( Expression ) Statement .)


state 81

    (18) IfStatement -> IF ( Expression ) Statement ELSE . Statement
    (12) Statement -> . Assignment
    (13) Statement -> . IfStatement
    (14) Statement -> . WhileStatement
    (15) Statement -> . ;
    (16) Statement -> . Block
    (20) Assignment -> . ID = Expression ;
    (18) IfStatement -> . IF ( Expression ) Statement ELSE Statement
    (19) WhileStatement -> . WHILE ( Expression ) Statement
    (17) Block -> . { Statements }

    ;               shift and go to state 22
    ID              shift and go to state 24
    IF              shift and go to state 25
    WHILE           shift and go to state 26
    {               shift and go to state 15

    Statement                      shift and go to state 82
    Assignment                     shift and go to state 19
    IfStatement                    shift and go to state 20
    WhileStatement                 shift and go to state 21
    Block                          shift and go to state 23

state 82

    (18) IfStatement -> IF ( Expression ) Statement ELSE Statement .

    ;               reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ID              reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 18 (IfStatement -> IF ( Expression ) Statement ELSE Statement .)

